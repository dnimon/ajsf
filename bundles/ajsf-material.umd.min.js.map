{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../projects/ajsf-material/src/lib/widgets/flex-layout-root.component.ts","../../../../projects/ajsf-material/src/lib/widgets/flex-layout-section.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-add-reference.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-button.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-button-group.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-checkbox.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-checkboxes.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-chip-list.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-datepicker.component.ts","../../../../projects/ajsf-material/src/lib/material-design-framework.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-file.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-input.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-number.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-one-of.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-radios.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-select.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-slider.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-stepper.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-tabs.component.ts","../../../../projects/ajsf-material/src/lib/widgets/material-textarea.component.ts","../../../../projects/ajsf-material/src/lib/widgets/public_api.ts","../../../../projects/ajsf-material/src/lib/material-design.framework.ts","../../../../projects/ajsf-material/src/lib/widgets/mat-utc-date-adapter.ts","../../../../projects/ajsf-material/src/lib/material-design-framework.module.ts","../../../../projects/ajsf-material/src/lib/angular-flex-monkey-patch.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","pop","length","push","__values","o","s","m","i","__read","r","ar","error","__spread","arguments","concat","FlexLayoutRootComponent","jsf","isFlexItem","removeItem","item","getFlexAttribute","node","attribute","index","indexOf","options","flex","split","showWidget","layoutNode","evaluateCondition","dataIndex","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","Default","JsonSchemaFormService","Input","FlexLayoutSectionComponent","controlDisabled","boundControl","expanded","containerType","defineProperty","notitle","setItemTitle","ngOnInit","initializeControl","expandable","type","toggleExpanded","flexActive","displayFlex","display","fxLayout","fxLayoutWrap","MaterialAddReferenceComponent","arrayItem","layoutIndex","maxItems","addItem","event","preventDefault","parent","slice","getParentNode","add","setArrayItemTitle","itemCount","MaterialButtonComponent","subscriptions","Subscription","ngOnDestroy","unsubscribe","_this","hasOwn","disabled","formOptions","disableInvalidSubmit","isValid","isValidChanges","subscribe","updateValue","onClick","target","MaterialButtonGroupComponent","radiosList","vertical","buildTitleMap","titleMap","enumNames","enum","showErrors","MaterialCheckboxComponent","trueValue","falseValue","showSlideToggle","readonly","controlValue","undefined","format","checked","getFormControlValue","MaterialCheckboxesComponent","horizontalList","checkboxList","formArray","getFormControl","_b","_c","checkboxItem","includes","filter","checkedItems","updateArrayCheckboxList","updateAllValues","forEach","MaterialChipListComponent","MaterialDatepickerComponent","matFormFieldDefaultOptions","matLabelGlobalOptions","autoCompleteList","formControl","setValue","moment","toISOString","dateValueStr","moment.utc","description","placeholder","Inject","MAT_FORM_FIELD_DEFAULT_OPTIONS","Optional","MAT_LABEL_GLOBAL_OPTIONS","MaterialDesignFrameworkComponent","changeDetector","frameworkInitialized","parentArray","isOrderable","dynamicTitle","widgetOptions","removable","recursiveReference","items","minItems","arrayItemType","initializeFramework","ngOnChanges","updateTitle","cloneDeep","widgetLayoutNode","assign","isDefined","minimum","maximum","multipleOf","test","title","orderable","parseText","getFormControlGroup","ChangeDetectorRef","toBase64","file","reader","FileReader","readAsDataURL","onload","onerror","MaterialFileComponent","console","log","files","base64String","_a","ViewChild","MaterialInputComponent","MaterialNumberComponent","allowNegative","allowDecimal","allowExponents","lastValidNumber","dataType","MaterialOneOfComponent","MaterialRadiosComponent","flexDirection","MaterialSelectComponent","cdf","selectList","isArray","selectFrameworkWidgets","warn","required","flatList","MaterialSliderComponent","MaterialStepperComponent","MaterialTabsComponent","selectedItem","showAddTab","updateControl","select","lastItem","setTabTitle","MaterialTextareaComponent","MATERIAL_FRAMEWORK_COMPONENTS","MaterialDesignFramework","_super","name","framework","stylesheets","widgets","root","section","$ref","button","button-group","checkbox","checkboxes","chip-list","date","number","one-of","radios","slider","stepper","tabs","text","textarea","alt-date","any-of","card","color","expansion-panel","hidden","image","integer","radiobuttons","range","submit","tagsinput","wizard","Framework","Injectable","MomentUtcDateAdapter","dateLocale","createDate","year","month","Error","locale","MomentDateAdapter","MAT_DATE_LOCALE","ANGULAR_MATERIAL_MODULES","MatAutocompleteModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatDatepickerModule","MatExpansionModule","MatFormFieldModule","MatIconModule","MatInputModule","MatNativeDateModule","MatRadioModule","MatSelectModule","MatSliderModule","MatSlideToggleModule","MatStepperModule","MatTabsModule","MatTooltipModule","MatToolbarModule","MatMenuModule","MediaMarshallerUpdateElement","MediaMarshaller","updateElement","element","key","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","FlexLayoutModule","WidgetLibraryModule","JsonSchemaFormModule","MatMomentDateModule","MaterialFileInputModule","declarations","exports","providers","FrameworkLibraryService","WidgetLibraryService","provide","useClass","multi","DateAdapter","entryComponents"],"mappings":"sqGAgBIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,MAC3EN,EAAGC,aAGZS,EAAUV,EAAGC,GACzB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIU,UAAU,uBAAyBC,OAAOX,GAAK,iCAE7D,SAASY,IAAOC,KAAKC,YAAcf,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOc,OAAOf,IAAMY,EAAGN,UAAYN,EAAEM,UAAW,IAAIM,YAyCnEI,EAAUC,EAASC,EAAYC,EAAGC,GAE9C,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,OAITO,KAAKR,EAAWK,GAClGH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,oBAItDO,EAAYjB,EAASkB,GACjC,IAAsGC,EAAGC,EAAGC,EAAGC,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPJ,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOK,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEZ,KAAMkB,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAOpC,OAAU0B,EACvJ,SAASM,EAAKK,GAAK,OAAO,SAAUC,GAAK,OACzC,SAAcC,GACV,GAAIhB,EAAG,MAAM,IAAI1B,UAAU,mCAC3B,KAAO8B,OACH,GAAIJ,EAAI,EAAGC,IAAMC,EAAY,EAARc,EAAG,GAASf,EAAU,OAAIe,EAAG,GAAKf,EAAS,SAAOC,EAAID,EAAU,SAAMC,EAAE9B,KAAK6B,GAAI,GAAKA,EAAEV,SAAWW,EAAIA,EAAE9B,KAAK6B,EAAGe,EAAG,KAAKrB,KAAM,OAAOO,EAE3J,OADID,EAAI,EAAGC,IAAGc,EAAK,CAAS,EAARA,EAAG,GAAQd,EAAEb,QACzB2B,EAAG,IACP,KAAK,EAAG,KAAK,EAAGd,EAAIc,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEhB,MAAO2B,EAAG,GAAIrB,MAAM,GAChD,KAAK,EAAGS,EAAEC,QAASJ,EAAIe,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIS,MAAOb,EAAEG,KAAKU,MAAO,SACxC,QACI,KAAMf,EAAIE,EAAEG,MAAML,EAAIA,EAAEgB,OAAS,GAAKhB,EAAEA,EAAEgB,OAAS,KAAkB,IAAVF,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,SACjG,GAAc,IAAVY,EAAG,MAAcd,GAAMc,EAAG,GAAKd,EAAE,IAAMc,EAAG,GAAKd,EAAE,IAAM,CAAEE,EAAEC,MAAQW,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIA,EAAIc,EAAI,MAC7D,GAAId,GAAKE,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIE,EAAEI,IAAIW,KAAKH,GAAK,MACvDd,EAAE,IAAIE,EAAEI,IAAIS,MAChBb,EAAEG,KAAKU,MAAO,SAEtBD,EAAKjB,EAAK3B,KAAKS,EAASuB,GAC1B,MAAOZ,GAAKwB,EAAK,CAAC,EAAGxB,GAAIS,EAAI,UAAeD,EAAIE,EAAI,EACtD,GAAY,EAARc,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAE3B,MAAO2B,EAAG,GAAKA,EAAG,QAAK,EAAQrB,MAAM,GArB9BL,CAAK,CAACwB,EAAGC,MAyBhClD,OAAOc,gBAYpByC,EAASC,GACrB,IAAIC,EAAsB,mBAAXV,QAAyBA,OAAOC,SAAUU,EAAID,GAAKD,EAAEC,GAAIE,EAAI,EAC5E,GAAID,EAAG,OAAOA,EAAEnD,KAAKiD,GACrB,GAAIA,GAAyB,iBAAbA,EAAEH,OAAqB,MAAO,CAC1C3B,KAAM,WAEF,OADI8B,GAAKG,GAAKH,EAAEH,SAAQG,OAAI,GACrB,CAAEhC,MAAOgC,GAAKA,EAAEG,KAAM7B,MAAO0B,KAG5C,MAAM,IAAI/C,UAAUgD,EAAI,0BAA4B,4CAGxCG,EAAOJ,EAAGP,GACtB,IAAIS,EAAsB,mBAAXX,QAAyBS,EAAET,OAAOC,UACjD,IAAKU,EAAG,OAAOF,EACf,IAAmBK,EAAYlC,EAA3BgC,EAAID,EAAEnD,KAAKiD,GAAOM,EAAK,GAC3B,IACI,WAAc,IAANb,GAAgBA,KAAM,MAAQY,EAAIF,EAAEjC,QAAQI,MAAMgC,EAAGR,KAAKO,EAAErC,OAExE,MAAOuC,GAASpC,EAAI,CAAEoC,MAAOA,WAEzB,IACQF,IAAMA,EAAE/B,OAAS4B,EAAIC,EAAU,SAAID,EAAEnD,KAAKoD,WAExC,GAAIhC,EAAG,MAAMA,EAAEoC,OAE7B,OAAOD,WAIKE,IACZ,IAAK,IAAIF,EAAK,GAAIH,EAAI,EAAGA,EAAIM,UAAUZ,OAAQM,IAC3CG,EAAKA,EAAGI,OAAON,EAAOK,UAAUN,KACpC,OAAOG,EAqDc9D,OAAOc,wBC1K9B,SAAAqD,EACUC,GAAAxD,KAAAwD,IAAAA,EAJDxD,KAAAyD,YAAa,SAOtBF,EAAA9D,UAAAiE,WAAA,SAAWC,GACT3D,KAAKwD,IAAIE,WAAWC,IAKtBJ,EAAA9D,UAAAmE,iBAAA,SAAiBC,EAAWC,GAC1B,IAAMC,EAAQ,CAAC,YAAa,cAAe,cAAcC,QAAQF,GACjE,QAASD,EAAKI,SAAW,IAAIC,MAAQ,IAAIC,MAAM,OAAOJ,KACnDF,EAAKI,SAAW,IAAIH,IAAc,CAAC,IAAK,IAAK,QAAQC,IAG1DR,EAAA9D,UAAA2E,WAAA,SAAWC,GACT,OAAOrE,KAAKwD,IAAIc,kBAAkBD,EAAYrE,KAAKuE,qCAhDtDC,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,0BACVC,SAAU,ugCAmBVC,gBAAiBC,EAAAA,wBAAwBC,qDAzBlCC,EAAAA,4DA4BNC,EAAAA,2BACAA,EAAAA,sBACAA,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,0BC4HD,SAAAC,EACUzB,GAAAxD,KAAAwD,IAAAA,EAVVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAEfnF,KAAAoF,UAAW,EACXpF,KAAAqF,cAAgB,aAShBjG,OAAAkG,eAAIL,EAAAxF,UAAA,eAAY,KAAhB,WACE,OAAOO,KAAKiE,QAAQsB,QAAU,KAAOvF,KAAKwD,IAAIgC,aAAaxF,uCAG7DiF,EAAAxF,UAAAgG,SAAA,WAKE,OAJAzF,KAAKwD,IAAIkC,kBAAkB1F,MAC3BA,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKoF,SAA4C,kBAA1BpF,KAAKiE,QAAQmB,SAClCpF,KAAKiE,QAAQmB,UAAYpF,KAAKiE,QAAQ0B,WAChC3F,KAAKqE,WAAWuB,MACtB,IAAK,UAAW,IAAK,QAAS,IAAK,WAAY,IAAK,mBACpD,IAAK,eAAgB,IAAK,iBAAkB,IAAK,iBAC/C5F,KAAKqF,cAAgB,WACrB,MACF,IAAK,OACHrF,KAAKqF,cAAgB,OACrB,MACF,IAAK,kBACHrF,KAAKqF,cAAgB,kBACrB,MACF,QACErF,KAAKqF,cAAgB,QAI3BJ,EAAAxF,UAAAoG,eAAA,WACM7F,KAAKiE,QAAQ0B,aAAc3F,KAAKoF,UAAYpF,KAAKoF,WAKvDH,EAAAxF,UAAAmE,iBAAA,SAAiBE,GACf,IAAMgC,EACqB,SAAzB9F,KAAKqE,WAAWuB,QACd5F,KAAKiE,QAAQ8B,aACU,SAAzB/F,KAAKiE,QAAQ+B,QAEf,OAAQlC,GACN,IAAK,UACH,OAAOgC,EACT,IAAK,UACH,OAAOA,EAAa,OAAS,UAC/B,IAAK,iBAAkB,IAAK,YAC1B,IAAM/B,EAAQ,CAAC,iBAAkB,aAAaC,QAAQF,GACtD,OAAQ9D,KAAKiE,QAAQ,cAAgB,IAAIE,MAAM,OAAOJ,IACpD/D,KAAKiE,QAAQH,IAAc,CAAC,SAAU,UAAUC,GACpD,IAAK,kBAAmB,IAAK,cAAe,IAAK,gBAC/C,OAAO/D,KAAKiE,QAAQH,GACtB,IAAK,SACH,OAAQ9D,KAAKiE,QAAQgC,UAAY,OAC/BjG,KAAKiE,QAAQiC,aAAe,IAAMlG,KAAKiE,QAAQiC,aAAe,8BA/MvE1B,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,6BACVC,SAAU,skNAkID,6RAvIFI,EAAAA,6DAuJNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,0BC/HD,SAAAmB,EACU3C,GAAAxD,KAAAwD,IAAAA,SAGV2C,EAAA1G,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,IAG5C7E,OAAAkG,eAAIa,EAAA1G,UAAA,gBAAa,KAAjB,WACE,OAAQO,KAAKqE,WAAW+B,WACtBpG,KAAKqG,YAAYrG,KAAKqG,YAAY5D,OAAS,GAAKzC,KAAKiE,QAAQqC,0CAGjEH,EAAA1G,UAAA8G,QAAA,SAAQC,GACNA,EAAMC,iBACNzG,KAAKwD,IAAI+C,QAAQvG,OAGnBZ,OAAAkG,eAAIa,EAAA1G,UAAA,aAAU,KAAd,WACE,IAAMiH,EAAc,CAClBnC,UAAWvE,KAAKuE,UAAUoC,MAAM,GAAI,GACpCN,YAAarG,KAAKqG,YAAYM,MAAM,GAAI,GACxCtC,WAAYrE,KAAKwD,IAAIoD,cAAc5G,OAErC,OAAO0G,EAAOrC,WAAWwC,KACvB7G,KAAKwD,IAAIsD,kBAAkBJ,EAAQ1G,KAAKqE,WAAYrE,KAAK+G,qEAjD9DvC,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,gCACVC,SAAU,maAUVC,gBAAiBC,EAAAA,wBAAwBC,qDAhBlCC,EAAAA,6DAuBNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,0BCYD,SAAAgC,EACUxD,GAAAxD,KAAAwD,IAAAA,EATVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAKfnF,KAAAiH,cAA8B,IAAIC,EAAAA,oBAMlCF,EAAAvH,UAAA0H,YAAA,WACEnH,KAAKiH,cAAcG,eAGrBJ,EAAAvH,UAAAgG,SAAA,WAAA,IAAA4B,EAAArH,KACEA,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,MACvBsH,EAAAA,OAAOtH,KAAKiE,QAAS,YACvBjE,KAAKkF,gBAAkBlF,KAAKiE,QAAQsD,SAC3BvH,KAAKwD,IAAIgE,YAAYC,uBAC9BzH,KAAKkF,iBAAmBlF,KAAKwD,IAAIkE,QACjC1H,KAAKiH,cAAcJ,IAAI7G,KAAKwD,IAAImE,eAAeC,WAAU,SAAAF,GAAW,OAAAL,EAAKnC,iBAAmBwC,QAIhGV,EAAAvH,UAAAoI,YAAA,SAAYrB,GAC0B,mBAAzBxG,KAAKiE,QAAQ6D,QACtB9H,KAAKiE,QAAQ6D,QAAQtB,GAErBxG,KAAKwD,IAAIqE,YAAY7H,KAAMwG,EAAMuB,OAAOnH,iCAxD7C4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,yBACVC,SAAU,guBAgBC,+EAtBJI,EAAAA,6DA+BNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,0BCeD,SAAAgD,EACUxE,GAAAxD,KAAAwD,IAAAA,EAVVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAEfnF,KAAAiI,WAAoB,GACpBjI,KAAAkI,UAAW,SASXF,EAAAvI,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKiI,WAAaE,EAAAA,cAChBnI,KAAKiE,QAAQmE,UAAYpI,KAAKiE,QAAQoE,UACtCrI,KAAKiE,QAAQqE,MAAM,GAErBtI,KAAKwD,IAAIkC,kBAAkB1F,OAG7BgI,EAAAvI,UAAAoI,YAAA,SAAYjH,GACVZ,KAAKiE,QAAQsE,YAAa,EAC1BvI,KAAKwD,IAAIqE,YAAY7H,KAAMY,6BA5D9B4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,+BACVC,SAAU,8pCA2BC,gFAjCJI,EAAAA,6DA4CNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,0BCqCD,SAAAwD,EACUhF,GAAAxD,KAAAwD,IAAAA,EAXVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAEfnF,KAAAyI,WAAiB,EACjBzI,KAAA0I,YAAkB,EAClB1I,KAAA2I,iBAAkB,SASlBH,EAAA/I,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,MAAOA,KAAKiE,QAAQ2E,UACrB,OAAtB5I,KAAK6I,mBAA+CC,IAAtB9I,KAAK6I,eACrC7I,KAAK6I,cAAe,EACpB7I,KAAKwD,IAAIqE,YAAY7H,KAAMA,KAAK0I,aAEL,iBAAzB1I,KAAKqE,WAAWuB,MACS,iBAA3B5F,KAAKqE,WAAW0E,SAEhB/I,KAAK2I,iBAAkB,IAI3BH,EAAA/I,UAAAoI,YAAA,SAAYrB,GACVxG,KAAKiE,QAAQsE,YAAa,EAC1BvI,KAAKwD,IAAIqE,YAAY7H,KAAMwG,EAAMwC,QAAUhJ,KAAKyI,UAAYzI,KAAK0I,aAGnEtJ,OAAAkG,eAAIkD,EAAA/I,UAAA,YAAS,KAAb,WACE,OAAOO,KAAKwD,IAAIyF,oBAAoBjJ,QAAUA,KAAKyI,oEAzGtDjE,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,2BACVC,SAAU,kyEA2DD,qIAhEFI,EAAAA,6DA+ENC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,0BChBD,SAAAkE,EACU1F,GAAAxD,KAAAwD,IAAAA,EAXVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAEfnF,KAAAmJ,gBAAiB,EAEjBnJ,KAAAoJ,aAA+B,UAS/BF,EAAAzJ,UAAAgG,SAAA,mBAQE,GAPAzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKmJ,eAA0C,sBAAzBnJ,KAAKqE,WAAWuB,MACX,oBAAzB5F,KAAKqE,WAAWuB,KAClB5F,KAAKwD,IAAIkC,kBAAkB1F,MAC3BA,KAAKoJ,aAAejB,EAAAA,cAClBnI,KAAKiE,QAAQmE,UAAYpI,KAAKiE,QAAQoE,UAAWrI,KAAKiE,QAAQqE,MAAM,GAElEtI,KAAKmF,aAAc,CACrB,IAAMkE,EAAYrJ,KAAKwD,IAAI8F,eAAetJ,UAC1C,IAA2B,IAAAuJ,EAAA5G,EAAA3C,KAAKoJ,cAAYI,EAAAD,EAAAzI,QAAA0I,EAAAtI,KAAAsI,EAAAD,EAAAzI,OAAE,CAAzC,IAAM2I,EAAYD,EAAA5I,MACrB6I,EAAaT,QAAUK,EAAUzI,MAAM8I,SAASD,EAAa7I,4GAKnExB,OAAAkG,eAAI4D,EAAAzJ,UAAA,aAAU,KAAd,WACE,OAAOO,KAAKoJ,aAAaO,QAAO,SAAAlI,GAAK,OAAAA,EAAEuH,WAASvG,SAAWzC,KAAKoJ,aAAa3G,wCAG/ErD,OAAAkG,eAAI4D,EAAAzJ,UAAA,cAAW,KAAf,WACE,IAAMmK,EAAe5J,KAAKoJ,aAAaO,QAAO,SAAAlI,GAAK,OAAAA,EAAEuH,WAASvG,OAC9D,OAAOmH,EAAe,GAAKA,EAAe5J,KAAKoJ,aAAa3G,wCAG9DyG,EAAAzJ,UAAAoI,YAAA,WACE7H,KAAKiE,QAAQsE,YAAa,EACtBvI,KAAKmF,cACPnF,KAAKwD,IAAIqG,wBAAwB7J,KAAMA,KAAKoJ,eAIhDF,EAAAzJ,UAAAqK,gBAAA,SAAgBtD,GACdxG,KAAKiE,QAAQsE,YAAa,EAC1BvI,KAAKoJ,aAAaW,SAAQ,SAAAtI,GAAK,OAAAA,EAAEuH,QAAUxC,EAAMwC,WACjDhJ,KAAK6H,wCAlGRrD,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,6BACVC,SAAU,y7CAkCD,0SA1CFI,EAAAA,6DA4DNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,0BC3CD,SAAAgF,EACUxG,GAAAxD,KAAAwD,IAAAA,EARVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,SAUf6E,EAAAvK,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,OAG7BgK,EAAAvK,UAAAoI,YAAA,SAAYrB,GACVxG,KAAKwD,IAAIqE,YAAY7H,KAAMwG,EAAMuB,OAAOnH,iCA1B3C4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,4BACVC,SAAU,gDAPHI,EAAAA,6DAgBNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,0BCoED,SAAAiF,EAC6DC,EACNC,EAC7C3G,GAFmDxD,KAAAkK,2BAAAA,EACNlK,KAAAmK,sBAAAA,EAC7CnK,KAAAwD,IAAAA,EAbVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAIfnF,KAAAoK,iBAA6B,UAW7BH,EAAAxK,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,MAAOA,KAAKiE,QAAQ2E,UAC3C5I,KAAK6I,eACP7I,KAAKqK,YAAYC,SAASC,EAAOvK,KAAK6I,cAAc2B,eACpDxK,KAAKyK,aAAeC,EAAAA,IAAW1K,KAAK6I,eAEjC7I,KAAKiE,QAAQsB,SAAYvF,KAAKiE,QAAQ0G,cAAe3K,KAAKiE,QAAQ2G,cACrE5K,KAAKiE,QAAQ0G,YAAc3K,KAAKiE,QAAQ2G,cAI5CX,EAAAxK,UAAAoI,YAAA,SAAYrB,GACVxG,KAAKqK,YAAYC,SAAS9D,EAAM5F,MAAM4J,eACtCxK,KAAKiE,QAAQsE,YAAa,EAC1BvI,KAAKyK,aAAeC,EAAAA,IAAW1K,KAAK6I,wCApGvCrE,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,6BACVC,SAAU,o5FAuDD,wSAsBNkG,EAAAA,OAAMpG,KAAA,CAACqG,EAAAA,iCAA8B,CAAAlF,KAAGmF,EAAAA,2CACxCF,EAAAA,OAAMpG,KAAA,CAACuG,EAAAA,2BAAwB,CAAApF,KAAGmF,EAAAA,kBAxF9BhG,EAAAA,6DAkFNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,0BC7DD,SAAAiG,EACUC,EACA1H,GADAxD,KAAAkL,eAAAA,EACAlL,KAAAwD,IAAAA,EAhBVxD,KAAAmL,sBAAuB,EAKvBnL,KAAAqK,YAAmB,KACnBrK,KAAAoL,YAAmB,KACnBpL,KAAAqL,aAAc,EACdrL,KAAAsL,aAAuB,YAYvBlM,OAAAkG,eAAI2F,EAAAxL,UAAA,mBAAgB,KAApB,WACE,SAAKO,KAAKqE,aAAerE,KAAKuL,cAAcC,WAC1CxL,KAAKuL,cAAc3C,UAAqC,SAAzB5I,KAAKqE,WAAWuB,UAI7C5F,KAAKqE,WAAWoH,uBAGfzL,KAAKqE,WAAW+B,YAAcpG,KAAKoL,iBAIjCpL,KAAKoL,YAAYM,MAAMjJ,OAAS,GAAKzC,KAAKoL,YAAYnH,QAAQ0H,YAEjC,SAAlC3L,KAAKqE,WAAWuH,eAEd5L,KAAKqG,YAAYrG,KAAKqG,YAAY5D,OAAS,KAAOzC,KAAKoL,YAAYM,MAAMjJ,OAAS,sCAGxFwI,EAAAxL,UAAAgG,SAAA,WACEzF,KAAK6L,uBAGPZ,EAAAxL,UAAAqM,YAAA,WACO9L,KAAKmL,sBACRnL,KAAK6L,sBAEH7L,KAAKsL,cACPtL,KAAK+L,eAITd,EAAAxL,UAAAoM,oBAAA,WACM7L,KAAKqE,YACPrE,KAAKiE,QAAU+H,EAAAA,QAAUhM,KAAKqE,WAAWJ,SAAW,IACpDjE,KAAKiM,iBAAgB7M,OAAA8M,OAAA9M,OAAA8M,OAAA,GAChBlM,KAAKqE,YAAU,CAClBJ,QAAS+H,EAAAA,QAAUhM,KAAKqE,WAAWJ,SAAW,MAEhDjE,KAAKuL,cAAgBvL,KAAKiM,iBAAiBhI,QAC3CjE,KAAKqK,YAAcrK,KAAKwD,IAAI8F,eAAetJ,MAGzCmM,EAAAA,UAAUnM,KAAKuL,cAAca,UAC7BD,EAAAA,UAAUnM,KAAKuL,cAAcc,UAC7BrM,KAAKuL,cAAce,YAAc,IAEjCtM,KAAKqE,WAAWuB,KAAO,UAItB,CAAC,OAAQ,mBAAoB,eAAgB,SAAU,OACtD,WAAY,kBAAmB,OAAQ,UAAW,MAAO,UACzD,SAAU,WAAY,QAAQ8D,SAAS1J,KAAKqE,WAAWuB,OACzD,UAAU2G,KAAKvM,KAAKuL,cAAciB,OAAS,MAE3CxM,KAAKsL,aAAetL,KAAKuL,cAAciB,MACvCxM,KAAK+L,eAGH/L,KAAKqE,WAAW+B,WAAsC,SAAzBpG,KAAKqE,WAAWuB,OAC/C5F,KAAKoL,YAAcpL,KAAKwD,IAAIoD,cAAc5G,MACtCA,KAAKoL,cACPpL,KAAKqL,YACmC,QAAtCrL,KAAKoL,YAAYxF,KAAKe,MAAM,EAAG,IACG,SAAlC3G,KAAKqE,WAAWuH,gBACf5L,KAAKuL,cAAc3C,UACpB5I,KAAKoL,YAAYnH,QAAQwI,YAI/BzM,KAAKmL,sBAAuB,GAE5BnL,KAAKiE,QAAU,IAInBgH,EAAAxL,UAAAsM,YAAA,WACE/L,KAAKiM,iBAAiBhI,QAAQuI,MAAQxM,KAAKwD,IAAIkJ,UAC7C1M,KAAKsL,aACLtL,KAAKwD,IAAIyF,oBAAoBjJ,MAC7BA,KAAKwD,IAAImJ,oBAAoB3M,MAAMY,MACnCZ,KAAKuE,UAAUvE,KAAKuE,UAAU9B,OAAS,KAI3CwI,EAAAxL,UAAAiE,WAAA,WACE1D,KAAKwD,IAAIE,WAAW1D,gCAnHvBwE,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,4BACVC,SAAA,+mDAPMiI,EAAAA,yBACW7H,EAAAA,6DAmBhBC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,sBACAA,EAAAA,SChBH,IAAM6H,GAAW,SAAAC,GAAQ,OAAA,IAAItM,SAAQ,SAACC,EAASC,GAC7C,IAAMqM,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,OAAS,WAAM,OAAAzM,EAAQsM,EAAO9L,SACrC8L,EAAOI,QAAU,SAAAhK,GAAS,OAAAzC,EAAOyC,sBA8CjC,SAAAiK,EACU5J,EACmD0G,EACNC,GAF7CnK,KAAAwD,IAAAA,EACmDxD,KAAAkK,2BAAAA,EACNlK,KAAAmK,sBAAAA,EAXvDnK,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,SAafiI,EAAA3N,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,OAGvBoN,EAAA3N,UAAAoI,YAAA,SAAYrB,0GAChB6G,QAAQC,IAAI,MAAO9G,EAAMuB,OAAOwF,OAC7B/G,EAAMuB,QAAUvB,EAAMuB,OAAOwF,OAAS/G,EAAMuB,OAAOwF,MAAM9K,OACrC,CAAA,EAAMoK,GAASrG,EAAMuB,OAAOwF,MAAM,KADtD,CAAA,EAAA,iBACKC,EAAeC,EAAA5L,OACrBwL,QAAQC,IAAIE,GACZxN,KAAKqK,YAAYC,SAASkD,gBAG1BxN,KAAKqK,YAAYC,SAAS,mEA9D/B9F,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,uBACVC,SAAU,mpDAsBA,gRArCHI,EAAAA,sDAyDJ8F,EAAAA,OAAMpG,KAAA,CAACqG,EAAAA,iCAA8B,CAAAlF,KAAGmF,EAAAA,2CACxCF,EAAAA,OAAMpG,KAAA,CAACuG,EAAAA,2BAAwB,CAAApF,KAAGmF,EAAAA,mDARpC/F,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,yBACA0I,EAAAA,UAASjJ,KAAA,CAAC,kCC2BX,SAAAkJ,EAC6DzD,EACNC,EAC7C3G,GAFmDxD,KAAAkK,2BAAAA,EACNlK,KAAAmK,sBAAAA,EAC7CnK,KAAAwD,IAAAA,EAZVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAEfnF,KAAAoK,iBAA6B,UAa7BuD,EAAAlO,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,MACtBA,KAAKiE,QAAQsB,SAAYvF,KAAKiE,QAAQ0G,cAAe3K,KAAKiE,QAAQ2G,cACrE5K,KAAKiE,QAAQ0G,YAAc3K,KAAKiE,QAAQ2G,cAI5C+C,EAAAlO,UAAAoI,YAAA,SAAYrB,GACVxG,KAAKwD,IAAIqE,YAAY7H,KAAMwG,EAAMuB,OAAOnH,kCA5F3C4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,wBACVC,SAAU,65FAsDD,ySAoBNkG,EAAAA,OAAMpG,KAAA,CAACqG,EAAAA,iCAA8B,CAAAlF,KAAGmF,EAAAA,2CACxCF,EAAAA,OAAMpG,KAAA,CAACuG,EAAAA,2BAAwB,CAAApF,KAAGmF,EAAAA,kBAlF9BhG,EAAAA,8DA2ENC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,2BCDD,SAAA4I,EAC6D1D,EACNC,EAC7C3G,GAFmDxD,KAAAkK,2BAAAA,EACNlK,KAAAmK,sBAAAA,EAC7CnK,KAAAwD,IAAAA,EAdVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAEfnF,KAAA6N,eAAgB,EAChB7N,KAAA8N,cAAe,EACf9N,KAAA+N,gBAAiB,EACjB/N,KAAAgO,gBAAkB,UAWlBJ,EAAAnO,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,MACM,YAA7BA,KAAKqE,WAAW4J,WAA0BjO,KAAK8N,cAAe,GAC7D9N,KAAKiE,QAAQsB,SAAYvF,KAAKiE,QAAQ0G,cAAe3K,KAAKiE,QAAQ2G,cACrE5K,KAAKiE,QAAQ0G,YAAc3K,KAAKiE,QAAQ2G,cAI5CgD,EAAAnO,UAAAoI,YAAA,SAAYrB,GACVxG,KAAKwD,IAAIqE,YAAY7H,KAAMwG,EAAMuB,OAAOnH,kCAxF3C4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,yBACVC,SAAU,wjFAgDD,ySAsBNkG,EAAAA,OAAMpG,KAAA,CAACqG,EAAAA,iCAA8B,CAAAlF,KAAGmF,EAAAA,2CACxCF,EAAAA,OAAMpG,KAAA,CAACuG,EAAAA,2BAAwB,CAAApF,KAAGmF,EAAAA,kBA9E9BhG,EAAAA,8DAwENC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,2BCtDD,SAAAkJ,EACU1K,GAAAxD,KAAAwD,IAAAA,EARVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,SAUf+I,EAAAzO,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,OAG7BkO,EAAAzO,UAAAoI,YAAA,SAAYrB,GACVxG,KAAKwD,IAAIqE,YAAY7H,KAAMwG,EAAMuB,OAAOnH,kCA1B3C4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,yBACVC,SAAU,iDAPHI,EAAAA,8DAgBNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,2BCgDD,SAAAmJ,EACU3K,GAAAxD,KAAAwD,IAAAA,EAVVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAEfnF,KAAAoO,cAAgB,SAChBpO,KAAAiI,WAAoB,UASpBkG,EAAA1O,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GACb,kBAAzBjE,KAAKqE,WAAWuB,OAClB5F,KAAKoO,cAAgB,OAEvBpO,KAAKiI,WAAaE,EAAAA,cAChBnI,KAAKiE,QAAQmE,UAAYpI,KAAKiE,QAAQoE,UACtCrI,KAAKiE,QAAQqE,MAAM,GAErBtI,KAAKwD,IAAIkC,kBAAkB1F,MAAOA,KAAKiE,QAAQ2E,WAGjDuF,EAAA1O,UAAAoI,YAAA,SAAYjH,GACVZ,KAAKiE,QAAQsE,YAAa,EAC1BvI,KAAKwD,IAAIqE,YAAY7H,KAAMY,8BAjF9B4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,yBACVC,SAAU,m1DAyCD,+KA/CFI,EAAAA,8DA8DNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,2BCkCD,SAAAqJ,EAC6DnE,EACNC,EAC7C3G,EACD8K,GAHoDtO,KAAAkK,2BAAAA,EACNlK,KAAAmK,sBAAAA,EAC7CnK,KAAAwD,IAAAA,EACDxD,KAAAsO,IAAAA,EAdTtO,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAEfnF,KAAAuO,WAAoB,GACpBvO,KAAAwO,QAAUA,EAAAA,eAaVH,EAAA5O,UAAAgG,SAAA,WACKzF,KAAK0G,OACN1G,KAAK0G,OAAO+H,uBAAuB/L,KAAK1C,MAExCqN,QAAQqB,KAAK,qBAAsB1O,MAErCA,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKuO,WAAapG,EAAAA,cAChBnI,KAAKiE,QAAQmE,UAAYpI,KAAKiE,QAAQoE,UACtCrI,KAAKiE,QAAQqE,OAAQtI,KAAKiE,QAAQ0K,WAAY3O,KAAKiE,QAAQ2K,UAE7D5O,KAAKwD,IAAIkC,kBAAkB1F,MAAOA,KAAKiE,QAAQ2E,UAC1C5I,KAAKiE,QAAQsB,SAAYvF,KAAKiE,QAAQ0G,cAAe3K,KAAKiE,QAAQ2G,cACrE5K,KAAKiE,QAAQ0G,YAAc3K,KAAKiE,QAAQ2G,cAI5CyD,EAAA5O,UAAAoI,YAAA,SAAYrB,GACVxG,KAAKiE,QAAQsE,YAAa,EAC1BvI,KAAKwD,IAAIqE,YAAY7H,KAAMwG,EAAM5F,kCAxHpC4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,yBACVC,SAAU,8iHAuED,ySAqBNkG,EAAAA,OAAMpG,KAAA,CAACqG,EAAAA,iCAA8B,CAAAlF,KAAGmF,EAAAA,2CACxCF,EAAAA,OAAMpG,KAAA,CAACuG,EAAAA,2BAAwB,CAAApF,KAAGmF,EAAAA,kBApG9BhG,EAAAA,6BAD2C6H,EAAAA,0DA8FjD5H,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,sBACAA,EAAAA,2BCnDD,SAAA6J,EACUrL,GAAAxD,KAAAwD,IAAAA,EAZVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,EAEfnF,KAAA6N,eAAgB,EAChB7N,KAAA8N,cAAe,EACf9N,KAAA+N,gBAAiB,EACjB/N,KAAAgO,gBAAkB,UASlBa,EAAApP,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,MAAOA,KAAKiE,QAAQ2E,WAGjDiG,EAAApP,UAAAoI,YAAA,SAAYrB,GACVxG,KAAKiE,QAAQsE,YAAa,EAC1BvI,KAAKwD,IAAIqE,YAAY7H,KAAMwG,EAAM5F,kCAtDpC4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,yBACVC,SAAU,2iCAuBC,iFA5BJI,EAAAA,8DAyCNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,2BCvBD,SAAA8J,EACUtL,GAAAxD,KAAAwD,IAAAA,EARVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,SAUf2J,EAAArP,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,OAG7B8O,EAAArP,UAAAoI,YAAA,SAAYrB,GACVxG,KAAKwD,IAAIqE,YAAY7H,KAAMwG,EAAMuB,OAAOnH,kCA1B3C4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,0BACVC,SAAU,iDAPHI,EAAAA,8DAgBNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,2BCgBD,SAAA+J,EACUvL,GAAAxD,KAAAwD,IAAAA,EAPVxD,KAAAgP,aAAe,EACfhP,KAAAiP,YAAa,SASbF,EAAAtP,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAK+G,UAAY/G,KAAKqE,WAAWqH,MAAMjJ,OAAS,EAChDzC,KAAKkP,iBAGPH,EAAAtP,UAAA0P,OAAA,SAAOpL,GACqC,SAAtC/D,KAAKqE,WAAWqH,MAAM3H,GAAO6B,OAC/B5F,KAAKwD,IAAI+C,QAAQ,CACflC,WAAYrE,KAAKqE,WAAWqH,MAAM3H,GAClCsC,YAAarG,KAAKqG,YAAY/C,OAAOS,GACrCQ,UAAWvE,KAAKuE,UAAUjB,OAAOS,KAEnC/D,KAAKkP,iBAEPlP,KAAKgP,aAAejL,GAGtBgL,EAAAtP,UAAAyP,cAAA,WACElP,KAAK+G,UAAY/G,KAAKqE,WAAWqH,MAAMjJ,OAAS,EAChD,IAAM2M,EAAWpP,KAAKqE,WAAWqH,MAAM1L,KAAKqE,WAAWqH,MAAMjJ,OAAS,GACtEzC,KAAKiP,WAA+B,SAAlBG,EAASxJ,MACzB5F,KAAK+G,WAAaqI,EAASnL,QAAQqC,UAAY,MAGnDyI,EAAAtP,UAAA4P,YAAA,SAAY1L,EAAWI,GACrB,OAAO/D,KAAKwD,IAAIsD,kBAAkB9G,KAAM2D,EAAMI,8BA/DjDS,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,uBACVC,SAAU,g9BAmBD,0EAxBFI,EAAAA,8DA+BNC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,2BCsCD,SAAAsK,EAC6DpF,EACNC,EAC7C3G,GAFmDxD,KAAAkK,2BAAAA,EACNlK,KAAAmK,sBAAAA,EAC7CnK,KAAAwD,IAAAA,EAVVxD,KAAAkF,iBAAkB,EAClBlF,KAAAmF,cAAe,SAYfmK,EAAA7P,UAAAgG,SAAA,WACEzF,KAAKiE,QAAUjE,KAAKqE,WAAWJ,SAAW,GAC1CjE,KAAKwD,IAAIkC,kBAAkB1F,MACtBA,KAAKiE,QAAQsB,SAAYvF,KAAKiE,QAAQ0G,cAAe3K,KAAKiE,QAAQ2G,cACrE5K,KAAKiE,QAAQ0G,YAAc3K,KAAKiE,QAAQ2G,cAI5C0E,EAAA7P,UAAAoI,YAAA,SAAYrB,GACVxG,KAAKwD,IAAIqE,YAAY7H,KAAMwG,EAAMuB,OAAOnH,kCAjF3C4D,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,2BACVC,SAAU,siFA8CD,ySAkBNkG,EAAAA,OAAMpG,KAAA,CAACqG,EAAAA,iCAA8B,CAAAlF,KAAGmF,EAAAA,2CACxCF,EAAAA,OAAMpG,KAAA,CAACuG,EAAAA,2BAAwB,CAAApF,KAAGmF,EAAAA,kBAxE9BhG,EAAAA,8DAkENC,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,aChDUuK,GAAgC,CAC3ChM,EAAyB0B,EACzBkB,EAA+B+H,GAC/BlH,EAAyBgB,EACzBQ,EAA2BU,EAC3Bc,EAA2BC,EAC3BmD,GAAuBO,GAAwBC,GAC/CO,GAAyBE,GAAyBQ,GAClDC,GAA0BC,GAAuBO,GACjDrE,kBCFF,SAAAuE,IAAA,IAAAnI,EAAAoI,EAAArO,MAAApB,KAAAoD,EAAAC,aAAArD,YAEEqH,EAAAqI,KAAO,kBAEPrI,EAAAsI,UAAY1E,EAEZ5D,EAAAuI,YAAc,CACZ,oDACA,4DAGFvI,EAAAwI,QAAU,CACRC,KAAQvM,EACRwM,QAAW9K,EACX+K,KAAQ7J,EACR8J,OAAUjJ,EACVkJ,eAAgBlI,EAChBmI,SAAY3H,EACZ4H,WAAclH,EACdmH,YAAarG,EACbsG,KAAQrG,EACR6C,KAAQM,GACRmD,OAAU3C,GACV4C,SAAUtC,GACVuC,OAAUtC,GACVgB,OAAUd,GACVqC,OAAU7B,GACV8B,QAAW7B,GACX8B,KAAQ7B,GACR8B,KAAQlD,GACRmD,SAAYxB,GACZyB,WAAY,OACZC,SAAU,SACVC,KAAQ,UACRC,MAAS,OACTC,kBAAmB,UACnBC,OAAU,OACVC,MAAS,OACTC,QAAW,SACXC,aAAgB,eAChBC,MAAS,SACTC,OAAU,SACVC,UAAa,YACbC,OAAU,oBA1C+B/R,EAAA4P,EAAAC,MAAAmC,EAAAA,gCAD5CC,EAAAA,gCCpBC,SAAAC,EAAiDC,UAC/CtC,EAAA9P,KAAAK,KAAM+R,IAAW/R,YAHqBJ,EAAAkS,EAAArC,GAMxCqC,EAAArS,UAAAuS,WAAA,SAAWC,EAAcC,EAAe5B,GAGtC,GAAI4B,EAAQ,GAAKA,EAAQ,GACvB,MAAMC,MAAM,wBAAwBD,EAAK,8CAG3C,GAAI5B,EAAO,EACT,MAAM6B,MAAM,iBAAiB7B,EAAI,qCAGnC,IAAIrP,EAASyJ,EAAAA,IAAW,CAAEuH,KAAIA,EAAEC,MAAKA,EAAE5B,KAAIA,IAAI8B,OAAOpS,KAAKoS,QAG3D,IAAKnR,EAAOyG,UACV,MAAMyK,MAAM,iBAAiB7B,EAAI,2BAA2B4B,EAAK,MAGnE,OAAOjR,MAxB+BoR,EAAAA,wCADzCR,EAAAA,gFAGc9G,EAAAA,UAAQ,CAAAnF,KAAIiF,EAAAA,OAAMpG,KAAA,CAAC6N,EAAAA,0BCsCrBC,GAA2B,CACtCC,EAAAA,sBAAuBC,EAAAA,gBAAiBC,EAAAA,sBAAuBC,EAAAA,cAC/DC,EAAAA,kBAAmBC,EAAAA,eAAgBC,EAAAA,oBAAqBC,EAAAA,mBACxDC,EAAAA,mBAAoBC,EAAAA,cAAeC,EAAAA,eAAgBC,EAAAA,oBACnDC,EAAAA,eAAgBC,EAAAA,gBAAiBC,EAAAA,gBAAiBC,EAAAA,qBAClDC,EAAAA,iBAAkBC,EAAAA,cAAeC,EAAAA,iBACjCC,EAAAA,iBAAkBC,EAAAA,cAAeD,EAAAA,qBAkCjC,eCnFME,EAAAA,EAA+BC,EAAAA,gBAAgBrU,UAAUsU,cAE/DD,EAAAA,gBAAgBrU,UAAUsU,cAAgB,SAAUC,EAAsBC,EAAarT,GACzE,eAARqT,GAAoB,MAAKrT,IAC3BA,EAAQ,OAEViT,EAA6BzS,MAAMpB,KAAM,CAACgU,EAASC,EAAKrT,2BD8C3DsT,EAAAA,SAAQzP,KAAA,CAAC,CACR0P,QAAO/Q,EAAA,CACLgR,EAAAA,aACAC,EAAAA,YACAC,EAAAA,oBACAC,EAAAA,kBACGhC,GAAwB,CAC3BiC,EAAAA,oBACAC,EAAAA,qBACAC,EAAAA,oBACAC,EAAAA,0BAEFC,aAAYxR,EACPmM,IAELsF,QAAOzR,EAAA,CACLqR,EAAAA,sBACGlF,IAELuF,UAAW,CACT/P,EAAAA,sBACAgQ,EAAAA,wBACAC,EAAAA,qBACA,CAACC,QAASrD,EAAAA,UAAWsD,SAAU1F,GAAyB2F,OAAO,GAC/D,CAAEF,QAASG,EAAAA,YAAaF,SAAUpD,KAEpCuD,gBAAejS,EACVmM","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { JsonSchemaFormService } from '@ajsf/core';\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'flex-layout-root-widget',\n  template: `\n    <div *ngFor=\"let layoutNode of layout; let i = index\"\n      [class.form-flex-item]=\"isFlexItem\"\n      [ngClass]=\"layoutNode?.options.layoutHtmlClass\"\n      [style.flex-grow]=\"getFlexAttribute(layoutNode, 'flex-grow')\"\n      [style.flex-shrink]=\"getFlexAttribute(layoutNode, 'flex-shrink')\"\n      [style.flex-basis]=\"getFlexAttribute(layoutNode, 'flex-basis')\"\n      [style.align-self]=\"(layoutNode?.options || {})['align-self']\"\n      [style.order]=\"layoutNode?.options?.order\"\n      [fxFlex]=\"layoutNode?.options?.fxFlex\"\n      [fxFlexOrder]=\"layoutNode?.options?.fxFlexOrder\"\n      [fxFlexOffset]=\"layoutNode?.options?.fxFlexOffset\"\n      [fxFlexAlign]=\"layoutNode?.options?.fxFlexAlign\">\n      <select-framework-widget *ngIf=\"showWidget(layoutNode)\"\n        [dataIndex]=\"layoutNode?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [parent]=\"parent\"\n        [layoutNode]=\"layoutNode\"></select-framework-widget>\n    <div>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class FlexLayoutRootComponent {\n  @Input() dataIndex: number[];\n  @Input() layoutIndex: number[];\n  @Input() layout: any[];\n  @Input() isFlexItem = false;\n  @Input() parent;\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  removeItem(item) {\n    this.jsf.removeItem(item);\n  }\n\n  // Set attributes for flexbox child\n  // (container attributes are set in flex-layout-section.component)\n  getFlexAttribute(node: any, attribute: string) {\n    const index = ['flex-grow', 'flex-shrink', 'flex-basis'].indexOf(attribute);\n    return ((node.options || {}).flex || '').split(/\\s+/)[index] ||\n      (node.options || {})[attribute] || ['1', '1', 'auto'][index];\n  }\n\n  showWidget(layoutNode: any): boolean {\n    return this.jsf.evaluateCondition(layoutNode, this.dataIndex);\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { JsonSchemaFormService } from '@ajsf/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'flex-layout-section-widget',\n  template: `\n    <div *ngIf=\"containerType === 'div'\"\n      [class]=\"options?.htmlClass || ''\"\n      [class.expandable]=\"options?.expandable && !expanded\"\n      [class.expanded]=\"options?.expandable && expanded\">\n      <label *ngIf=\"sectionTitle\"\n        [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n        [innerHTML]=\"sectionTitle\"\n        (click)=\"toggleExpanded()\"></label>\n      <flex-layout-root-widget *ngIf=\"expanded\"\n        [layout]=\"layoutNode.items\"\n        [dataIndex]=\"dataIndex\"\n        [layoutIndex]=\"layoutIndex\"\n        [isFlexItem]=\"getFlexAttribute('is-flex')\"\n        [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n        [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n        [style.display]=\"getFlexAttribute('display')\"\n        [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n        [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n        [style.justify-content]=\"getFlexAttribute('justify-content')\"\n        [style.align-items]=\"getFlexAttribute('align-items')\"\n        [style.align-content]=\"getFlexAttribute('align-content')\"\n        [fxLayout]=\"getFlexAttribute('layout')\"\n        [fxLayoutGap]=\"options?.fxLayoutGap\"\n        [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n        [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </div>\n\n    <fieldset *ngIf=\"containerType === 'fieldset'\"\n      [class]=\"options?.htmlClass || ''\"\n      [class.expandable]=\"options?.expandable && !expanded\"\n      [class.expanded]=\"options?.expandable && expanded\"\n      [disabled]=\"options?.readonly\">\n      <legend *ngIf=\"sectionTitle\"\n        [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n        [innerHTML]=\"sectionTitle\"\n        (click)=\"toggleExpanded()\"></legend>\n      <flex-layout-root-widget *ngIf=\"expanded\"\n        [layout]=\"layoutNode.items\"\n        [dataIndex]=\"dataIndex\"\n        [layoutIndex]=\"layoutIndex\"\n        [isFlexItem]=\"getFlexAttribute('is-flex')\"\n        [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n        [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n        [style.display]=\"getFlexAttribute('display')\"\n        [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n        [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n        [style.justify-content]=\"getFlexAttribute('justify-content')\"\n        [style.align-items]=\"getFlexAttribute('align-items')\"\n        [style.align-content]=\"getFlexAttribute('align-content')\"\n        [fxLayout]=\"getFlexAttribute('layout')\"\n        [fxLayoutGap]=\"options?.fxLayoutGap\"\n        [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n        [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </fieldset>\n\n    <mat-card *ngIf=\"containerType === 'card'\"\n      [ngClass]=\"options?.htmlClass || ''\"\n      [class.expandable]=\"options?.expandable && !expanded\"\n      [class.expanded]=\"options?.expandable && expanded\">\n      <mat-card-header *ngIf=\"sectionTitle\">\n        <legend\n          [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n          [innerHTML]=\"sectionTitle\"\n          (click)=\"toggleExpanded()\"></legend>\n      </mat-card-header>\n      <mat-card-content *ngIf=\"expanded\">\n        <fieldset [disabled]=\"options?.readonly\">\n          <flex-layout-root-widget *ngIf=\"expanded\"\n            [layout]=\"layoutNode.items\"\n            [dataIndex]=\"dataIndex\"\n            [layoutIndex]=\"layoutIndex\"\n            [isFlexItem]=\"getFlexAttribute('is-flex')\"\n            [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n            [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n            [style.display]=\"getFlexAttribute('display')\"\n            [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n            [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n            [style.justify-content]=\"getFlexAttribute('justify-content')\"\n            [style.align-items]=\"getFlexAttribute('align-items')\"\n            [style.align-content]=\"getFlexAttribute('align-content')\"\n            [fxLayout]=\"getFlexAttribute('layout')\"\n            [fxLayoutGap]=\"options?.fxLayoutGap\"\n            [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n            [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          </fieldset>\n      </mat-card-content>\n      <mat-card-footer>\n        <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n          [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </mat-card-footer>\n    </mat-card>\n\n    <mat-expansion-panel *ngIf=\"containerType === 'expansion-panel'\"\n      [expanded]=\"expanded\"\n      [hideToggle]=\"!options?.expandable\">\n      <mat-expansion-panel-header>\n        <mat-panel-title>\n          <legend *ngIf=\"sectionTitle\"\n            [class]=\"options?.labelHtmlClass\"\n            [innerHTML]=\"sectionTitle\"\n            (click)=\"toggleExpanded()\"></legend>\n        </mat-panel-title>\n      </mat-expansion-panel-header>\n      <fieldset [disabled]=\"options?.readonly\">\n        <flex-layout-root-widget *ngIf=\"expanded\"\n          [layout]=\"layoutNode.items\"\n          [dataIndex]=\"dataIndex\"\n          [layoutIndex]=\"layoutIndex\"\n          [isFlexItem]=\"getFlexAttribute('is-flex')\"\n          [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n          [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n          [style.display]=\"getFlexAttribute('display')\"\n          [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n          [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n          [style.justify-content]=\"getFlexAttribute('justify-content')\"\n          [style.align-items]=\"getFlexAttribute('align-items')\"\n          [style.align-content]=\"getFlexAttribute('align-content')\"\n          [fxLayout]=\"getFlexAttribute('layout')\"\n          [fxLayoutGap]=\"options?.fxLayoutGap\"\n          [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n          [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n      </fieldset>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </mat-expansion-panel>`,\n  styles: [`\n    fieldset { border: 0; margin: 0; padding: 0; }\n    .legend { font-weight: bold; }\n    .expandable > .legend:before { content: '▶'; padding-right: .3em; }\n    .expanded > .legend:before { content: '▼'; padding-right: .2em; }\n  `],\n})\nexport class FlexLayoutSectionComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  expanded = true;\n  containerType = 'div';\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  get sectionTitle() {\n    return this.options.notitle ? null : this.jsf.setItemTitle(this);\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this);\n    this.options = this.layoutNode.options || {};\n    this.expanded = typeof this.options.expanded === 'boolean' ?\n      this.options.expanded : !this.options.expandable;\n    switch (this.layoutNode.type) {\n      case 'section': case 'array': case 'fieldset': case 'advancedfieldset':\n      case 'authfieldset': case 'optionfieldset': case 'selectfieldset':\n        this.containerType = 'fieldset';\n        break;\n      case 'card':\n        this.containerType = 'card';\n        break;\n      case 'expansion-panel':\n        this.containerType = 'expansion-panel';\n        break;\n      default: // 'div', 'flex', 'tab', 'conditional', 'actions'\n        this.containerType = 'div';\n    }\n  }\n\n  toggleExpanded() {\n    if (this.options.expandable) { this.expanded = !this.expanded; }\n  }\n\n  // Set attributes for flexbox container\n  // (child attributes are set in flex-layout-root.component)\n  getFlexAttribute(attribute: string) {\n    const flexActive: boolean =\n      this.layoutNode.type === 'flex' ||\n      !!this.options.displayFlex ||\n      this.options.display === 'flex';\n    // if (attribute !== 'flex' && !flexActive) { return null; }\n    switch (attribute) {\n      case 'is-flex':\n        return flexActive;\n      case 'display':\n        return flexActive ? 'flex' : 'initial';\n      case 'flex-direction': case 'flex-wrap':\n        const index = ['flex-direction', 'flex-wrap'].indexOf(attribute);\n        return (this.options['flex-flow'] || '').split(/\\s+/)[index] ||\n          this.options[attribute] || ['column', 'nowrap'][index];\n      case 'justify-content': case 'align-items': case 'align-content':\n        return this.options[attribute];\n      case 'layout':\n        return (this.options.fxLayout || 'row') +\n          this.options.fxLayoutWrap ? ' ' + this.options.fxLayoutWrap : '';\n\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { JsonSchemaFormService } from '@ajsf/core';\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-add-reference-widget',\n  template: `\n    <section [class]=\"options?.htmlClass || ''\" align=\"end\">\n      <button mat-raised-button *ngIf=\"showAddButton\"\n        [color]=\"options?.color || 'accent'\"\n        [disabled]=\"options?.readonly\"\n        (click)=\"addItem($event)\">\n        <span *ngIf=\"options?.icon\" [class]=\"options?.icon\"></span>\n        <span *ngIf=\"options?.title\" [innerHTML]=\"buttonText\"></span>\n      </button>\n    </section>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MaterialAddReferenceComponent implements OnInit {\n  options: any;\n  itemCount: number;\n  previousLayoutIndex: number[];\n  previousDataIndex: number[];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n  }\n\n  get showAddButton(): boolean {\n    return !this.layoutNode.arrayItem ||\n      this.layoutIndex[this.layoutIndex.length - 1] < this.options.maxItems;\n  }\n\n  addItem(event) {\n    event.preventDefault();\n    this.jsf.addItem(this);\n  }\n\n  get buttonText(): string {\n    const parent: any = {\n      dataIndex: this.dataIndex.slice(0, -1),\n      layoutIndex: this.layoutIndex.slice(0, -1),\n      layoutNode: this.jsf.getParentNode(this),\n    };\n    return parent.layoutNode.add ||\n      this.jsf.setArrayItemTitle(parent, this.layoutNode, this.itemCount);\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { JsonSchemaFormService, hasOwn } from '@ajsf/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-button-widget',\n  template: `\n    <div class=\"button-row\" [class]=\"options?.htmlClass || ''\">\n      <button mat-raised-button\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [color]=\"options?.color || 'primary'\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (click)=\"updateValue($event)\">\n        <mat-icon *ngIf=\"options?.icon\" class=\"mat-24\">{{options?.icon}}</mat-icon>\n        <span *ngIf=\"options?.title\" [innerHTML]=\"options?.title\"></span>\n      </button>\n    </div>`,\n    styles: [` button { margin-top: 10px; } `],\n})\nexport class MaterialButtonComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n  subscriptions: Subscription = new Subscription();\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (hasOwn(this.options, 'disabled')) {\n      this.controlDisabled = this.options.disabled;\n    } else if (this.jsf.formOptions.disableInvalidSubmit) {\n      this.controlDisabled = !this.jsf.isValid;\n      this.subscriptions.add(this.jsf.isValidChanges.subscribe(isValid => this.controlDisabled = !isValid));\n    }\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event);\n    } else {\n      this.jsf.updateValue(this, event.target.value);\n    }\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { JsonSchemaFormService, buildTitleMap } from '@ajsf/core';\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-button-group-widget',\n  template: `\n    <div>\n      <div *ngIf=\"options?.title\">\n        <label\n          [attr.for]=\"'control' + layoutNode?._id\"\n          [class]=\"options?.labelHtmlClass || ''\"\n          [style.display]=\"options?.notitle ? 'none' : ''\"\n          [innerHTML]=\"options?.title\"></label>\n      </div>\n      <mat-button-toggle-group\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [name]=\"controlName\"\n        [value]=\"controlValue\"\n        [vertical]=\"!!options.vertical\">\n        <mat-button-toggle *ngFor=\"let radioItem of radiosList\"\n          [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n          [value]=\"radioItem?.value\"\n          (click)=\"updateValue(radioItem?.value)\">\n          <span [innerHTML]=\"radioItem?.name\"></span>\n        </mat-button-toggle>\n      </mat-button-toggle-group>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </div>`,\n    styles: [` mat-error { font-size: 75%; } `],\n})\nexport class MaterialButtonGroupComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  radiosList: any[] = [];\n  vertical = false;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    );\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(value) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, value);\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { JsonSchemaFormService } from '@ajsf/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-checkbox-widget',\n  template: `\n    <mat-checkbox *ngIf=\"boundControl && !showSlideToggle\"\n      [formControl]=\"formControl\"\n      align=\"left\"\n      [color]=\"options?.color || 'primary'\"\n      [id]=\"'control' + layoutNode?._id\"\n      labelPosition=\"after\"\n      [name]=\"controlName\"\n      (blur)=\"options.showErrors = true\">\n      <span *ngIf=\"options?.title\"\n        class=\"checkbox-name\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></span>\n    </mat-checkbox>\n    <mat-checkbox *ngIf=\"!boundControl && !showSlideToggle\"\n      align=\"left\"\n      [color]=\"options?.color || 'primary'\"\n      [disabled]=\"controlDisabled || options?.readonly\"\n      [id]=\"'control' + layoutNode?._id\"\n      labelPosition=\"after\"\n      [name]=\"controlName\"\n      [checked]=\"isChecked\"\n      (blur)=\"options.showErrors = true\"\n      (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n        class=\"checkbox-name\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></span>\n    </mat-checkbox>\n    <mat-slide-toggle *ngIf=\"boundControl && showSlideToggle\"\n      [formControl]=\"formControl\"\n      align=\"left\"\n      [color]=\"options?.color || 'primary'\"\n      [id]=\"'control' + layoutNode?._id\"\n      labelPosition=\"after\"\n      [name]=\"controlName\"\n      (blur)=\"options.showErrors = true\">\n      <span *ngIf=\"options?.title\"\n        class=\"checkbox-name\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></span>\n    </mat-slide-toggle>\n    <mat-slide-toggle *ngIf=\"!boundControl && showSlideToggle\"\n      align=\"left\"\n      [color]=\"options?.color || 'primary'\"\n      [disabled]=\"controlDisabled || options?.readonly\"\n      [id]=\"'control' + layoutNode?._id\"\n      labelPosition=\"after\"\n      [name]=\"controlName\"\n      [checked]=\"isChecked\"\n      (blur)=\"options.showErrors = true\"\n      (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n        class=\"checkbox-name\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></span>\n    </mat-slide-toggle>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    .checkbox-name { white-space: nowrap; }\n    mat-error { font-size: 75%; }\n  `],\n})\nexport class MaterialCheckboxComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  trueValue: any = true;\n  falseValue: any = false;\n  showSlideToggle = false;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this, !this.options.readonly);\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = false;\n      this.jsf.updateValue(this, this.falseValue);\n    }\n    if (this.layoutNode.type === 'slide-toggle' ||\n      this.layoutNode.format === 'slide-toggle'\n    ) {\n      this.showSlideToggle = true;\n    }\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, event.checked ? this.trueValue : this.falseValue);\n  }\n\n  get isChecked() {\n    return this.jsf.getFormControlValue(this) === this.trueValue;\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { buildTitleMap } from '@ajsf/core';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { JsonSchemaFormService, TitleMapItem } from '@ajsf/core';\n\n// TODO: Change this to use a Selection List instead?\n// https://material.angular.io/components/list/overview\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-checkboxes-widget',\n  template: `\n    <div>\n      <mat-checkbox type=\"checkbox\"\n        [checked]=\"allChecked\"\n        [color]=\"options?.color || 'primary'\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [indeterminate]=\"someChecked\"\n        [name]=\"options?.name\"\n        (blur)=\"options.showErrors = true\"\n        (change)=\"updateAllValues($event)\">\n        <span class=\"checkbox-name\" [innerHTML]=\"options?.name\"></span>\n      </mat-checkbox>\n      <label *ngIf=\"options?.title\"\n        class=\"title\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <ul class=\"checkbox-list\" [class.horizontal-list]=\"horizontalList\">\n        <li *ngFor=\"let checkboxItem of checkboxList\"\n          [class]=\"options?.htmlClass || ''\">\n          <mat-checkbox type=\"checkbox\"\n            [(ngModel)]=\"checkboxItem.checked\"\n            [color]=\"options?.color || 'primary'\"\n            [disabled]=\"controlDisabled || options?.readonly\"\n            [name]=\"checkboxItem?.name\"\n            (blur)=\"options.showErrors = true\"\n            (change)=\"updateValue()\">\n            <span class=\"checkbox-name\" [innerHTML]=\"checkboxItem?.name\"></span>\n          </mat-checkbox>\n        </li>\n      </ul>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </div>`,\n  styles: [`\n    .title { font-weight: bold; }\n    .checkbox-list { list-style-type: none; }\n    .horizontal-list > li { display: inline-block; margin-right: 10px; zoom: 1; }\n    .checkbox-name { white-space: nowrap; }\n    mat-error { font-size: 75%; }\n  `],\n})\nexport class MaterialCheckboxesComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  horizontalList = false;\n  formArray: AbstractControl;\n  checkboxList: TitleMapItem[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.horizontalList = this.layoutNode.type === 'checkboxes-inline' ||\n      this.layoutNode.type === 'checkboxbuttons';\n    this.jsf.initializeControl(this);\n    this.checkboxList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames, this.options.enum, true\n    );\n    if (this.boundControl) {\n      const formArray = this.jsf.getFormControl(this);\n      for (const checkboxItem of this.checkboxList) {\n        checkboxItem.checked = formArray.value.includes(checkboxItem.value);\n      }\n    }\n  }\n\n  get allChecked(): boolean {\n    return this.checkboxList.filter(t => t.checked).length === this.checkboxList.length;\n  }\n\n  get someChecked(): boolean {\n    const checkedItems = this.checkboxList.filter(t => t.checked).length;\n    return checkedItems > 0 && checkedItems < this.checkboxList.length;\n  }\n\n  updateValue() {\n    this.options.showErrors = true;\n    if (this.boundControl) {\n      this.jsf.updateArrayCheckboxList(this, this.checkboxList);\n    }\n  }\n\n  updateAllValues(event: any) {\n    this.options.showErrors = true;\n    this.checkboxList.forEach(t => t.checked = event.checked);\n    this.updateValue();\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { JsonSchemaFormService } from '@ajsf/core';\n\n// TODO: Add this control\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-chip-list-widget',\n  template: ``,\n})\nexport class MaterialChipListComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n","import { Component, Inject, Input, OnInit, Optional } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { JsonSchemaFormService } from '@ajsf/core';\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\nimport { MAT_LABEL_GLOBAL_OPTIONS } from '@angular/material/core';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\nimport { parseDate } from './date.functions';\nimport * as moment from 'moment';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-datepicker-widget',\n  template: `\n    <mat-form-field [appearance]=\"options?.appearance || matFormFieldDefaultOptions?.appearance || 'standard'\"\n                    [class]=\"options?.htmlClass || ''\"\n                    [floatLabel]=\"options?.floatLabel || matLabelGlobalOptions?.float || (options?.notitle ? 'never' : 'auto')\"\n                    [hideRequiredMarker]=\"options?.hideRequired ? 'true' : 'false'\"\n                    [style.width]=\"'100%'\">\n      <mat-label *ngIf=\"!options?.notitle\">{{options?.title}}</mat-label>\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n        <input matInput *ngIf=\"boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [id]=\"'control' + layoutNode?._id\"\n        [max]=\"options?.maximum\"\n        [matDatepicker]=\"picker\"\n        [min]=\"options?.minimum\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.title\"\n        [readonly]=\"true\"\n        [required]=\"options?.required\"\n        [value]=\"dateValueStr\"\n        [style.width]=\"'100%'\"\n        (blur)=\"options.showErrors = true\"\n        [tabindex]=\"options?.tabindex ? options?.tabindex : 0\"\n        (dateChange)=\"updateValue($event)\"\n        (dateInput)=\"updateValue($event)\"\n        [style.cursor]=\"'default'\">\n      <input matInput *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [id]=\"'control' + layoutNode?._id\"\n        [max]=\"options?.maximum\"\n        [matDatepicker]=\"picker\"\n        [min]=\"options?.minimum\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [readonly]=\"options?.readonly\"\n        [tabindex]=\"options?.tabindex ? options?.tabindex : 0\"\n        (blur)=\"options.showErrors = true\"\n        (dateChange)=\"updateValue($event)\"\n        (dateInput)=\"updateValue($event)\">\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    </mat-form-field>\n    <mat-datepicker #picker ></mat-datepicker>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep json-schema-form mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\nexport class MaterialDatepickerComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: string;\n  dateValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  dateStr;\n  dateValueStr;\n  autoCompleteList: string[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) @Optional() public matFormFieldDefaultOptions,\n    @Inject(MAT_LABEL_GLOBAL_OPTIONS) @Optional() public matLabelGlobalOptions,\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this, !this.options.readonly);\n    if (this.controlValue) {\n      this.formControl.setValue(moment(this.controlValue).toISOString());\n      this.dateValueStr = moment.utc(this.controlValue);\n    }\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event: MatDatepickerInputEvent<Date>) {\n    this.formControl.setValue(event.value.toISOString());\n    this.options.showErrors = true;\n    this.dateValueStr = moment.utc(this.controlValue);\n  }\n}\n","import {ChangeDetectorRef, Component, Input, OnChanges, OnInit} from '@angular/core';\nimport {isDefined, JsonSchemaFormService} from '@ajsf/core';\nimport cloneDeep from 'lodash/cloneDeep';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-design-framework',\n  templateUrl: './material-design-framework.component.html',\n  styleUrls: ['./material-design-framework.component.scss'],\n})\nexport class MaterialDesignFrameworkComponent implements OnInit, OnChanges {\n  frameworkInitialized = false;\n  inputType: string;\n  options: any; // Options used in this framework\n  widgetLayoutNode: any; // layoutNode passed to child widget\n  widgetOptions: any; // Options passed to child widget\n  formControl: any = null;\n  parentArray: any = null;\n  isOrderable = false;\n  dynamicTitle: string = null;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n  @Input() parent;\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get showRemoveButton(): boolean {\n    if (!this.layoutNode || !this.widgetOptions.removable ||\n      this.widgetOptions.readonly || this.layoutNode.type === '$ref'\n    ) {\n      return false;\n    }\n    if (this.layoutNode.recursiveReference) {\n      return true;\n    }\n    if (!this.layoutNode.arrayItem || !this.parentArray) {\n      return false;\n    }\n    // If array length <= minItems, don't allow removing any items\n    return this.parentArray.items.length - 1 <= this.parentArray.options.minItems ? false :\n      // For removable list items, allow removing any item\n      this.layoutNode.arrayItemType === 'list' ? true :\n        // For removable tuple items, only allow removing last item in list\n        this.layoutIndex[this.layoutIndex.length - 1] === this.parentArray.items.length - 2;\n  }\n\n  ngOnInit() {\n    this.initializeFramework();\n  }\n\n  ngOnChanges() {\n    if (!this.frameworkInitialized) {\n      this.initializeFramework();\n    }\n    if (this.dynamicTitle) {\n      this.updateTitle();\n    }\n  }\n\n  initializeFramework() {\n    if (this.layoutNode) {\n      this.options = cloneDeep(this.layoutNode.options || {});\n      this.widgetLayoutNode = {\n        ...this.layoutNode,\n        options: cloneDeep(this.layoutNode.options || {})\n      };\n      this.widgetOptions = this.widgetLayoutNode.options;\n      this.formControl = this.jsf.getFormControl(this);\n\n      if (\n        isDefined(this.widgetOptions.minimum) &&\n        isDefined(this.widgetOptions.maximum) &&\n        this.widgetOptions.multipleOf >= 1\n      ) {\n        this.layoutNode.type = 'range';\n      }\n\n      if (\n        !['$ref', 'advancedfieldset', 'authfieldset', 'button', 'card',\n          'checkbox', 'expansion-panel', 'help', 'message', 'msg', 'section',\n          'submit', 'tabarray', 'tabs'].includes(this.layoutNode.type) &&\n        /{{.+?}}/.test(this.widgetOptions.title || '')\n      ) {\n        this.dynamicTitle = this.widgetOptions.title;\n        this.updateTitle();\n      }\n\n      if (this.layoutNode.arrayItem && this.layoutNode.type !== '$ref') {\n        this.parentArray = this.jsf.getParentNode(this);\n        if (this.parentArray) {\n          this.isOrderable =\n            this.parentArray.type.slice(0, 3) !== 'tab' &&\n            this.layoutNode.arrayItemType === 'list' &&\n            !this.widgetOptions.readonly &&\n            this.parentArray.options.orderable;\n        }\n      }\n\n      this.frameworkInitialized = true;\n    } else {\n      this.options = {};\n    }\n  }\n\n  updateTitle() {\n    this.widgetLayoutNode.options.title = this.jsf.parseText(\n      this.dynamicTitle,\n      this.jsf.getFormControlValue(this),\n      this.jsf.getFormControlGroup(this).value,\n      this.dataIndex[this.dataIndex.length - 1]\n    );\n  }\n\n  removeItem() {\n    this.jsf.removeItem(this);\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { Component, Inject, Input, OnInit, ViewChild } from '@angular/core';\nimport { JsonSchemaFormService } from '@ajsf/core';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\nimport { Optional } from '@angular/core';\nimport { MAT_LABEL_GLOBAL_OPTIONS } from '@angular/material/core';\n\nconst toBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n  reader.onload = () => resolve(reader.result);\n  reader.onerror = error => reject(error);\n});\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-file-widget',\n  template: `<mat-form-field [appearance]=\"options?.appearance || matFormFieldDefaultOptions?.appearance || 'standard'\"\n                    [class]=\"options?.htmlClass || ''\"\n                    [floatLabel]=\"options?.floatLabel || matLabelGlobalOptions?.float || (options?.notitle ? 'never' : 'auto')\"\n                    [hideRequiredMarker]=\"options?.hideRequired ? 'true' : 'false'\"\n                    [style.width]=\"'100%'\">\n      <mat-label *ngIf=\"!options?.notitle\">{{options?.title}}</mat-label>\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <ngx-mat-file-input [tabindex]=\"options?.tabindex ? options?.tabindex : 0\" #fileInput (change)=\"updateValue($event);options.showErrors = true\" [required]=\"options?.required\" (blur)=\"options.showErrors = true\"\n        >\n      </ngx-mat-file-input>\n      <button mat-icon-button matSuffix *ngIf=\"!fileInput.empty\" (click)=\"fileInput.clear($event);updateValue($event)\" style='cursor:pointer;'>\n        <mat-icon>clear</mat-icon>\n      </button>\n      <mat-icon matSuffix *ngIf=\"fileInput.empty\" style='cursor:pointer'>folder</mat-icon>\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n   styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep json-schema-form mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `]\n})\nexport class MaterialFileComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n  @ViewChild('fileInput') fileInput;\n\n  constructor(\n    private jsf: JsonSchemaFormService,\n    @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) @Optional() public matFormFieldDefaultOptions,\n    @Inject(MAT_LABEL_GLOBAL_OPTIONS) @Optional() public matLabelGlobalOptions\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  async updateValue(event) {\n    console.log(\"!!!\", event.target.files)\n    if(event.target && event.target.files && event.target.files.length) {\n      const base64String = await toBase64(event.target.files[0]);\n      console.log(base64String)\n      this.formControl.setValue(base64String);\n    }\n    else {\n      this.formControl.setValue(null);\n    }\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport {Component, Inject, Input, OnInit, Optional} from '@angular/core';\nimport { JsonSchemaFormService } from '@ajsf/core';\nimport { MAT_LABEL_GLOBAL_OPTIONS } from '@angular/material/core';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-input-widget',\n  template: `\n    <mat-form-field [appearance]=\"options?.appearance || matFormFieldDefaultOptions?.appearance || 'standard'\"\n      [class]=\"options?.htmlClass || ''\"\n      [floatLabel]=\"options?.floatLabel || matLabelGlobalOptions?.float || (options?.notitle ? 'never' : 'auto')\"\n      [hideRequiredMarker]=\"options?.hideRequired ? 'true' : 'false'\"\n      [style.width]=\"'100%'\">\n      <mat-label *ngIf=\"!options?.notitle\">{{options?.title}}</mat-label>\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <input matInput *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [type]=\"layoutNode?.type\"\n        [tabindex]=\"options?.tabindex ? options?.tabindex : 0\"\n        (blur)=\"options.showErrors = true\">\n      <input matInput *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        [tabindex]=\"options?.tabindex ? options?.tabindex : 0\"\n        (input)=\"updateValue($event)\"\n        (blur)=\"options.showErrors = true\">\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      <mat-autocomplete *ngIf=\"options?.typeahead?.source\">\n        <mat-option *ngFor=\"let word of options?.typeahead?.source\"\n          [value]=\"word\">{{word}}</mat-option>\n      </mat-autocomplete>\n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep json-schema-form mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\nexport class MaterialInputComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: string;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  autoCompleteList: string[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n\n  constructor(\n    @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) @Optional() public matFormFieldDefaultOptions,\n    @Inject(MAT_LABEL_GLOBAL_OPTIONS) @Optional() public matLabelGlobalOptions,\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n","import {Component, Inject, Input, OnInit, Optional} from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { JsonSchemaFormService } from '@ajsf/core';\nimport { MAT_LABEL_GLOBAL_OPTIONS } from '@angular/material/core';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-number-widget',\n  template: `\n    <mat-form-field [appearance]=\"options?.appearance || matFormFieldDefaultOptions?.appearance || 'standard'\"\n    [class]=\"options?.htmlClass || ''\"\n    [floatLabel]=\"options?.floatLabel || matLabelGlobalOptions?.float || (options?.notitle ? 'never' : 'auto')\"\n    [hideRequiredMarker]=\"options?.hideRequired ? 'true' : 'false'\"\n    [style.width]=\"'100%'\">\n    <mat-label *ngIf=\"!options?.notitle\">{{options?.title}}</mat-label>\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <input matInput *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.max]=\"options?.maximum\"\n        [attr.min]=\"options?.minimum\"\n        [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [type]=\"'number'\"\n        (blur)=\"options.showErrors = true\">\n      <input matInput *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.max]=\"options?.maximum\"\n        [attr.min]=\"options?.minimum\"\n        [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [type]=\"'number'\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\"\n        (blur)=\"options.showErrors = true\">\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"layoutNode?.type === 'range'\" align=\"start\"\n        [innerHTML]=\"controlValue\"></mat-hint>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep json-schema-form mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\nexport class MaterialNumberComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  allowNegative = true;\n  allowDecimal = true;\n  allowExponents = false;\n  lastValidNumber = '';\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) @Optional() public matFormFieldDefaultOptions,\n    @Inject(MAT_LABEL_GLOBAL_OPTIONS) @Optional() public matLabelGlobalOptions,\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (this.layoutNode.dataType === 'integer') { this.allowDecimal = false; }\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { JsonSchemaFormService } from '@ajsf/core';\n\n// TODO: Add this control\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-one-of-widget',\n  template: ``,\n})\nexport class MaterialOneOfComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { JsonSchemaFormService, buildTitleMap } from '@ajsf/core';\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-radios-widget',\n  template: `\n    <div>\n      <div *ngIf=\"options?.title\">\n        <label\n          [attr.for]=\"'control' + layoutNode?._id\"\n          [class]=\"options?.labelHtmlClass || ''\"\n          [style.display]=\"options?.notitle ? 'none' : ''\"\n          [innerHTML]=\"options?.title\"></label>\n      </div>\n      <mat-radio-group *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [style.flex-direction]=\"flexDirection\"\n        [name]=\"controlName\"\n        (blur)=\"options.showErrors = true\">\n        <mat-radio-button *ngFor=\"let radioItem of radiosList\"\n          [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n          [value]=\"radioItem?.value\">\n          <span [innerHTML]=\"radioItem?.name\"></span>\n        </mat-radio-button>\n      </mat-radio-group>\n      <mat-radio-group *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [style.flex-direction]=\"flexDirection\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [name]=\"controlName\"\n        [value]=\"controlValue\">\n        <mat-radio-button *ngFor=\"let radioItem of radiosList\"\n          [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n          [value]=\"radioItem?.value\"\n          (click)=\"updateValue(radioItem?.value)\">\n          <span [innerHTML]=\"radioItem?.name\"></span>\n        </mat-radio-button>\n      </mat-radio-group>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n        [innerHTML]=\"options?.errorMessage\"></mat-error>\n    </div>`,\n  styles: [`\n    mat-radio-group { display: inline-flex; }\n    mat-radio-button { margin: 2px; }\n    mat-error { font-size: 75%; }\n  `]\n})\nexport class MaterialRadiosComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  flexDirection = 'column';\n  radiosList: any[] = [];\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    if (this.layoutNode.type === 'radios-inline') {\n      this.flexDirection = 'row';\n    }\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    );\n    this.jsf.initializeControl(this, !this.options.readonly);\n  }\n\n  updateValue(value) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, value);\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport {Component, Inject, Input, OnInit, Optional, ChangeDetectorRef} from '@angular/core';\nimport { JsonSchemaFormService, buildTitleMap, isArray } from '@ajsf/core';\nimport { MAT_LABEL_GLOBAL_OPTIONS } from '@angular/material/core';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-select-widget',\n  template: `\n    <mat-form-field\n      [appearance]=\"options?.appearance || matFormFieldDefaultOptions?.appearance || 'standard'\"\n      [class]=\"options?.htmlClass || ''\"\n      [floatLabel]=\"options?.floatLabel || matLabelGlobalOptions?.float || (options?.notitle ? 'never' : 'auto')\"\n      [hideRequiredMarker]=\"options?.hideRequired ? 'true' : 'false'\"\n      [style.width]=\"'100%'\">\n      <mat-label *ngIf=\"!options?.notitle\">{{options?.title}}</mat-label>\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <mat-select *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.name]=\"controlName\"\n        [id]=\"'control' + layoutNode?._id\"\n        [multiple]=\"options?.multiple\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [tabIndex]=\"options?.tabindex ? options?.tabindex : 0\"\n        (blur)=\"options.showErrors = true\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <mat-option *ngIf=\"!isArray(selectItem?.items)\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </mat-option>\n          <mat-optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <mat-option *ngFor=\"let subItem of selectItem.items\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </mat-option>\n          </mat-optgroup>\n        </ng-template>\n      </mat-select>\n      <mat-select *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.name]=\"controlName\"\n        [disabled]=\"controlDisabled || options?.readonly\"\n        [id]=\"'control' + layoutNode?._id\"\n        [multiple]=\"options?.multiple\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [required]=\"options?.required\"\n        [style.width]=\"'100%'\"\n        [value]=\"controlValue\"\n        [tabIndex]=\"options?.tabindex ? options?.tabindex : 0\"\n        (blur)=\"options.showErrors = true\"\n        (change)=\"updateValue($event)\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <mat-option *ngIf=\"!isArray(selectItem?.items)\"\n            [attr.selected]=\"selectItem?.value === controlValue\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </mat-option>\n          <mat-optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <mat-option *ngFor=\"let subItem of selectItem.items\"\n              [attr.selected]=\"subItem?.value === controlValue\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </mat-option>\n          </mat-optgroup>\n        </ng-template>\n      </mat-select>\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep json-schema-form mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\nexport class MaterialSelectComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  selectList: any[] = [];\n  isArray = isArray;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n  @Input() parent;\n\n  constructor(\n    @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) @Optional() public matFormFieldDefaultOptions,\n    @Inject(MAT_LABEL_GLOBAL_OPTIONS) @Optional() public matLabelGlobalOptions,\n    private jsf: JsonSchemaFormService,\n    public cdf: ChangeDetectorRef\n  ) { }\n\n  ngOnInit() {\n    if(this.parent) {\n      this.parent.selectFrameworkWidgets.push(this);\n    } else {\n      console.warn('Missing parent for', this);\n    }\n    this.options = this.layoutNode.options || {};\n    this.selectList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, !!this.options.required, !!this.options.flatList\n    );\n    this.jsf.initializeControl(this, !this.options.readonly);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, event.value);\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { JsonSchemaFormService } from '@ajsf/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-slider-widget',\n  template: `\n    <mat-slider thumbLabel *ngIf=\"boundControl\"\n      [formControl]=\"formControl\"\n      [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n      [id]=\"'control' + layoutNode?._id\"\n      [max]=\"options?.maximum\"\n      [min]=\"options?.minimum\"\n      [step]=\"options?.multipleOf || options?.step || 'any'\"\n      [style.width]=\"'100%'\"\n      (blur)=\"options.showErrors = true\"></mat-slider>\n    <mat-slider thumbLabel *ngIf=\"!boundControl\"\n      [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n      [disabled]=\"controlDisabled || options?.readonly\"\n      [id]=\"'control' + layoutNode?._id\"\n      [max]=\"options?.maximum\"\n      [min]=\"options?.minimum\"\n      [step]=\"options?.multipleOf || options?.step || 'any'\"\n      [style.width]=\"'100%'\"\n      [value]=\"controlValue\"\n      (blur)=\"options.showErrors = true\"\n      (change)=\"updateValue($event)\"></mat-slider>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n    styles: [` mat-error { font-size: 75%; } `],\n})\nexport class MaterialSliderComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  allowNegative = true;\n  allowDecimal = true;\n  allowExponents = false;\n  lastValidNumber = '';\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this, !this.options.readonly);\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true;\n    this.jsf.updateValue(this, event.value);\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { JsonSchemaFormService } from '@ajsf/core';\n\n// TODO: Add this control\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-stepper-widget',\n  template: ``,\n})\nexport class MaterialStepperComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { JsonSchemaFormService } from '@ajsf/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-tabs-widget',\n  template: `\n    <nav mat-tab-nav-bar\n      [attr.aria-label]=\"options?.label || options?.title || ''\"\n      [style.width]=\"'100%'\">\n        <a mat-tab-link *ngFor=\"let item of layoutNode?.items; let i = index\"\n          [active]=\"selectedItem === i\"\n          (click)=\"select(i)\">\n          <span *ngIf=\"showAddTab || item.type !== '$ref'\"\n            [innerHTML]=\"setTabTitle(item, i)\"></span>\n        </a>\n    </nav>\n    <div *ngFor=\"let layoutItem of layoutNode?.items; let i = index\"\n      [class]=\"options?.htmlClass || ''\">\n      <select-framework-widget *ngIf=\"selectedItem === i\"\n        [class]=\"(options?.fieldHtmlClass || '') + ' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')\"\n        [dataIndex]=\"layoutNode?.dataType === 'array' ? (dataIndex || []).concat(i) : dataIndex\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"></select-framework-widget>\n    </div>`,\n  styles: [` a { cursor: pointer; } `],\n})\nexport class MaterialTabsComponent implements OnInit {\n  options: any;\n  itemCount: number;\n  selectedItem = 0;\n  showAddTab = true;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.itemCount = this.layoutNode.items.length - 1;\n    this.updateControl();\n  }\n\n  select(index) {\n    if (this.layoutNode.items[index].type === '$ref') {\n      this.jsf.addItem({\n        layoutNode: this.layoutNode.items[index],\n        layoutIndex: this.layoutIndex.concat(index),\n        dataIndex: this.dataIndex.concat(index)\n      });\n      this.updateControl();\n    }\n    this.selectedItem = index;\n  }\n\n  updateControl() {\n    this.itemCount = this.layoutNode.items.length - 1;\n    const lastItem = this.layoutNode.items[this.layoutNode.items.length - 1];\n    this.showAddTab = lastItem.type === '$ref' &&\n      this.itemCount < (lastItem.options.maxItems || 1000);\n  }\n\n  setTabTitle(item: any, index: number): string {\n    return this.jsf.setArrayItemTitle(this, item, index);\n  }\n}\n","import { AbstractControl } from '@angular/forms';\nimport {Component, Inject, Input, OnInit, Optional} from '@angular/core';\nimport { JsonSchemaFormService } from '@ajsf/core';\nimport { MAT_LABEL_GLOBAL_OPTIONS } from '@angular/material/core';\nimport { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'material-textarea-widget',\n  template: `\n    <mat-form-field [appearance]=\"options?.appearance || matFormFieldDefaultOptions?.appearance || 'standard'\"\n      [class]=\"options?.htmlClass || ''\"\n      [floatLabel]=\"options?.floatLabel || matLabelGlobalOptions?.float || (options?.notitle ? 'never' : 'auto')\"\n      [hideRequiredMarker]=\"options?.hideRequired ? 'true' : 'false'\"\n      [style.width]=\"'100%'\">\n      <mat-label *ngIf=\"!options?.notitle\">{{options?.title}}</mat-label>\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n        [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n      <textarea matInput *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [required]=\"options?.required\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [style.width]=\"'100%'\"\n        (blur)=\"options.showErrors = true\"></textarea>\n      <textarea matInput *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [required]=\"options?.required\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [style.width]=\"'100%'\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\"\n        (blur)=\"options.showErrors = true\"></textarea>\n      <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n        [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n      <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n        align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n    </mat-form-field>\n    <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n      [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n    mat-error { font-size: 75%; margin-top: -1rem; margin-bottom: 0.5rem; }\n    ::ng-deep json-schema-form mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix { width: initial; }\n  `],\n})\nexport class MaterialTextareaComponent implements OnInit {\n  formControl: AbstractControl;\n  controlName: string;\n  controlValue: any;\n  controlDisabled = false;\n  boundControl = false;\n  options: any;\n  @Input() layoutNode: any;\n  @Input() layoutIndex: number[];\n  @Input() dataIndex: number[];\n\n  constructor(\n    @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) @Optional() public matFormFieldDefaultOptions,\n    @Inject(MAT_LABEL_GLOBAL_OPTIONS) @Optional() public matLabelGlobalOptions,\n    private jsf: JsonSchemaFormService\n  ) { }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {};\n    this.jsf.initializeControl(this);\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder;\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value);\n  }\n}\n","import { FlexLayoutRootComponent } from './flex-layout-root.component';\nimport { FlexLayoutSectionComponent } from './flex-layout-section.component';\nimport { MaterialAddReferenceComponent } from './material-add-reference.component';\nimport { MaterialButtonComponent } from './material-button.component';\nimport { MaterialButtonGroupComponent } from './material-button-group.component';\nimport { MaterialCheckboxComponent } from './material-checkbox.component';\nimport { MaterialCheckboxesComponent } from './material-checkboxes.component';\nimport { MaterialChipListComponent } from './material-chip-list.component';\nimport { MaterialDatepickerComponent } from './material-datepicker.component';\nimport { MaterialDesignFrameworkComponent } from '../material-design-framework.component';\nimport { MaterialFileComponent } from './material-file.component';\nimport { MaterialInputComponent } from './material-input.component';\nimport { MaterialNumberComponent } from './material-number.component';\nimport { MaterialOneOfComponent } from './material-one-of.component';\nimport { MaterialRadiosComponent } from './material-radios.component';\nimport { MaterialSelectComponent } from './material-select.component';\nimport { MaterialSliderComponent } from './material-slider.component';\nimport { MaterialStepperComponent } from './material-stepper.component';\nimport { MaterialTabsComponent } from './material-tabs.component';\nimport { MaterialTextareaComponent } from './material-textarea.component';\n\n\nexport const MATERIAL_FRAMEWORK_COMPONENTS = [\n  FlexLayoutRootComponent, FlexLayoutSectionComponent,\n  MaterialAddReferenceComponent, MaterialOneOfComponent,\n  MaterialButtonComponent, MaterialButtonGroupComponent,\n  MaterialCheckboxComponent, MaterialCheckboxesComponent,\n  MaterialChipListComponent, MaterialDatepickerComponent,\n  MaterialFileComponent, MaterialInputComponent, MaterialNumberComponent,\n  MaterialRadiosComponent, MaterialSelectComponent, MaterialSliderComponent,\n  MaterialStepperComponent, MaterialTabsComponent, MaterialTextareaComponent,\n  MaterialDesignFrameworkComponent\n];\n\nexport { FlexLayoutRootComponent } from './flex-layout-root.component';\nexport { FlexLayoutSectionComponent } from './flex-layout-section.component';\nexport { MaterialAddReferenceComponent } from './material-add-reference.component';\nexport { MaterialOneOfComponent } from './material-one-of.component';\nexport { MaterialButtonComponent } from './material-button.component';\nexport { MaterialButtonGroupComponent } from './material-button-group.component';\nexport { MaterialCheckboxComponent } from './material-checkbox.component';\nexport { MaterialCheckboxesComponent } from './material-checkboxes.component';\nexport { MaterialChipListComponent } from './material-chip-list.component';\nexport { MaterialDatepickerComponent } from './material-datepicker.component';\nexport { MaterialFileComponent } from './material-file.component';\nexport { MaterialInputComponent } from './material-input.component';\nexport { MaterialNumberComponent } from './material-number.component';\nexport { MaterialRadiosComponent } from './material-radios.component';\nexport { MaterialSelectComponent } from './material-select.component';\nexport { MaterialSliderComponent } from './material-slider.component';\nexport { MaterialStepperComponent } from './material-stepper.component';\nexport { MaterialTabsComponent } from './material-tabs.component';\nexport { MaterialTextareaComponent } from './material-textarea.component';\nexport { MaterialDesignFrameworkComponent } from '../material-design-framework.component';\n","import {Injectable} from '@angular/core';\nimport {Framework} from '@ajsf/core';\nimport {\n  FlexLayoutRootComponent,\n  FlexLayoutSectionComponent,\n  MaterialAddReferenceComponent,\n  MaterialButtonComponent,\n  MaterialButtonGroupComponent,\n  MaterialCheckboxComponent,\n  MaterialCheckboxesComponent,\n  MaterialChipListComponent,\n  MaterialDatepickerComponent,\n  MaterialDesignFrameworkComponent,\n  MaterialFileComponent,\n  MaterialInputComponent,\n  MaterialNumberComponent,\n  MaterialOneOfComponent,\n  MaterialRadiosComponent,\n  MaterialSelectComponent,\n  MaterialSliderComponent,\n  MaterialStepperComponent,\n  MaterialTabsComponent,\n  MaterialTextareaComponent\n} from './widgets/public_api';\n\n\n// Material Design Framework\n// https://github.com/angular/material2\n\n@Injectable()\nexport class MaterialDesignFramework extends Framework {\n  name = 'material-design';\n\n  framework = MaterialDesignFrameworkComponent;\n\n  stylesheets = [\n    '//fonts.googleapis.com/icon?family=Material+Icons',\n    '//fonts.googleapis.com/css?family=Roboto:300,400,500,700',\n  ];\n\n  widgets = {\n    'root': FlexLayoutRootComponent,\n    'section': FlexLayoutSectionComponent,\n    '$ref': MaterialAddReferenceComponent,\n    'button': MaterialButtonComponent,\n    'button-group': MaterialButtonGroupComponent,\n    'checkbox': MaterialCheckboxComponent,\n    'checkboxes': MaterialCheckboxesComponent,\n    'chip-list': MaterialChipListComponent,\n    'date': MaterialDatepickerComponent,\n    'file': MaterialFileComponent,\n    'number': MaterialNumberComponent,\n    'one-of': MaterialOneOfComponent,\n    'radios': MaterialRadiosComponent,\n    'select': MaterialSelectComponent,\n    'slider': MaterialSliderComponent,\n    'stepper': MaterialStepperComponent,\n    'tabs': MaterialTabsComponent,\n    'text': MaterialInputComponent,\n    'textarea': MaterialTextareaComponent,\n    'alt-date': 'date',\n    'any-of': 'one-of',\n    'card': 'section',\n    'color': 'text',\n    'expansion-panel': 'section',\n    'hidden': 'none',\n    'image': 'none',\n    'integer': 'number',\n    'radiobuttons': 'button-group',\n    'range': 'slider',\n    'submit': 'button',\n    'tagsinput': 'chip-list',\n    'wizard': 'stepper',\n  };\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';   \nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\nimport { Moment } from 'moment';\nimport * as moment from 'moment';\n\n@Injectable()\nexport class MomentUtcDateAdapter extends MomentDateAdapter {\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) dateLocale: string) {\n    super(dateLocale);\n  }\n\n  createDate(year: number, month: number, date: number): Moment {\n    // Moment.js will create an invalid date if any of the components are out of bounds, but we\n    // explicitly check each case so we can throw more descriptive errors.\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = moment.utc({ year, month, date }).locale(this.locale);\n\n    // If the result isn't valid, the date must have been out of bounds for this month.\n    if (!result.isValid()) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n}","import {\n  Framework,\n  FrameworkLibraryService,\n  JsonSchemaFormModule,\n  JsonSchemaFormService,\n  WidgetLibraryModule, WidgetLibraryService\n} from '@ajsf/core';\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatNativeDateModule} from '@angular/material/core';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MaterialDesignFramework} from './material-design.framework';\nimport {MATERIAL_FRAMEWORK_COMPONENTS} from './widgets/public_api';\nimport {fixAngularFlex} from './angular-flex-monkey-patch';\nimport { MatMomentDateModule, MAT_MOMENT_DATE_ADAPTER_OPTIONS } from '@angular/material-moment-adapter';\nimport {MomentUtcDateAdapter} from './widgets/mat-utc-date-adapter'\nimport { DateAdapter } from '@angular/material/core';\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\n\n/**\n * unused @angular/material modules:\n * MatDialogModule, MatGridListModule, MatListModule, MatMenuModule,\n * MatPaginatorModule, MatProgressBarModule, MatProgressSpinnerModule,\n * MatSidenavModule, MatSnackBarModule, MatSortModule, MatTableModule,\n * ,\n */\nexport const ANGULAR_MATERIAL_MODULES = [\n  MatAutocompleteModule, MatButtonModule, MatButtonToggleModule, MatCardModule,\n  MatCheckboxModule, MatChipsModule, MatDatepickerModule, MatExpansionModule,\n  MatFormFieldModule, MatIconModule, MatInputModule, MatNativeDateModule,\n  MatRadioModule, MatSelectModule, MatSliderModule, MatSlideToggleModule,\n  MatStepperModule, MatTabsModule, MatTooltipModule,\n  MatToolbarModule, MatMenuModule, MatToolbarModule,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    ...ANGULAR_MATERIAL_MODULES,\n    WidgetLibraryModule,\n    JsonSchemaFormModule,\n    MatMomentDateModule,\n    MaterialFileInputModule,\n  ],\n  declarations: [\n    ...MATERIAL_FRAMEWORK_COMPONENTS,\n  ],\n  exports: [\n    JsonSchemaFormModule,\n    ...MATERIAL_FRAMEWORK_COMPONENTS,\n  ],\n  providers: [\n    JsonSchemaFormService,\n    FrameworkLibraryService,\n    WidgetLibraryService,\n    {provide: Framework, useClass: MaterialDesignFramework, multi: true},\n    { provide: DateAdapter, useClass: MomentUtcDateAdapter }\n  ],\n  entryComponents: [\n    ...MATERIAL_FRAMEWORK_COMPONENTS,\n  ]\n})\nexport class MaterialDesignFrameworkModule {\n  constructor() {\n    fixAngularFlex();\n  }\n}\n","import { MediaMarshaller } from '@angular/flex-layout/core';\n\nexport function fixAngularFlex() {\n  // monkey patch based on errors in console  - https://github.com/angular/flex-layout/issues/1011\n  const MediaMarshallerUpdateElement = MediaMarshaller.prototype.updateElement;\n\n  MediaMarshaller.prototype.updateElement = function (element: HTMLElement, key: string, value: any) {\n    if (key === 'layout-gap' && (value === null || value === undefined)) {\n      value = '0px';\n    }\n    MediaMarshallerUpdateElement.apply(this, [element, key, value]);\n  };\n}\n"]}