import { longDays, longMonths, shortDays, shortMonths } from '../locale-dates/en-US';
/**
 *
 * @param date
 * @param options
 * return a date string which follows the JSON schema standard
 */
export function dateToString(date, options = {}) {
    const dateFormat = options.dateFormat || 'YYYY-MM-DD';
    // TODO: Use options.locale to change default format and names
    // const locale = options.locale || 'en-US';
    date = new Date(date || undefined);
    if (!date.getDate()) {
        return null;
    }
    const year = date.getFullYear().toString();
    const month = date.getMonth();
    const day = date.getDate();
    const dayOfWeek = date.getDay();
    return dateFormat
        .replace(/S/g, getOrdinal(day))
        .replace(/YYYY/g, year)
        .replace(/YY/g, year.slice(-2))
        .replace(/MMMM/g, longMonths[month])
        .replace(/MMM/g, shortMonths[month])
        .replace(/MM/g, ('0' + (month + 1)).slice(-2))
        .replace(/M/g, month + 1)
        .replace(/DDDD/g, longDays[dayOfWeek])
        .replace(/DDD/g, shortDays[dayOfWeek])
        .replace(/DD/g, ('0' + day).slice(-2))
        .replace(/D/g, day);
}
export function getOrdinal(day) {
    if (day > 3 && day < 21) {
        return 'th';
    }
    switch (day % 10) {
        case 1: return 'st';
        case 2: return 'nd';
        case 3: return 'rd';
        default: return 'th';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5mdW5jdGlvbnMuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvZG5pbW9uL0RvY3VtZW50cy9naXQvY29udmVwYXkvYWpzZi9wcm9qZWN0cy9hanNmLWNvcmUvc3JjLyIsInNvdXJjZXMiOlsibGliL3NoYXJlZC9kYXRlLmZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFckY7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUFDLElBQW1CLEVBQUUsVUFBZSxFQUFFO0lBQ2pFLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDO0lBQ3RELDhEQUE4RDtJQUM5RCw0Q0FBNEM7SUFDNUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQUUsT0FBTyxJQUFJLENBQUM7S0FBRTtJQUNyQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEMsT0FBTyxVQUFVO1NBQ2QsT0FBTyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDOUIsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7U0FDdEIsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDOUIsT0FBTyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkMsT0FBTyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUN4QixPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNyQyxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNyQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3JDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsR0FBVztJQUNwQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUUsRUFBRTtRQUFFLE9BQU8sSUFBSSxDQUFDO0tBQUU7SUFDekMsUUFBUSxHQUFHLEdBQUcsRUFBRSxFQUFFO1FBQ2hCLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUM7UUFDcEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQztRQUNwQixLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDO1FBQ3BCLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDO0tBQ3RCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvbmdEYXlzLCBsb25nTW9udGhzLCBzaG9ydERheXMsIHNob3J0TW9udGhzIH0gZnJvbSAnLi4vbG9jYWxlLWRhdGVzL2VuLVVTJztcblxuLyoqXG4gKlxuICogQHBhcmFtIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiByZXR1cm4gYSBkYXRlIHN0cmluZyB3aGljaCBmb2xsb3dzIHRoZSBKU09OIHNjaGVtYSBzdGFuZGFyZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVRvU3RyaW5nKGRhdGU6IHN0cmluZyB8IERhdGUsIG9wdGlvbnM6IGFueSA9IHt9KTogc3RyaW5nIHtcbiAgY29uc3QgZGF0ZUZvcm1hdCA9IG9wdGlvbnMuZGF0ZUZvcm1hdCB8fCAnWVlZWS1NTS1ERCc7XG4gIC8vIFRPRE86IFVzZSBvcHRpb25zLmxvY2FsZSB0byBjaGFuZ2UgZGVmYXVsdCBmb3JtYXQgYW5kIG5hbWVzXG4gIC8vIGNvbnN0IGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8ICdlbi1VUyc7XG4gIGRhdGUgPSBuZXcgRGF0ZShkYXRlIHx8IHVuZGVmaW5lZCk7XG4gIGlmICghZGF0ZS5nZXREYXRlKCkpIHsgcmV0dXJuIG51bGw7IH1cbiAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpO1xuICBjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgY29uc3QgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG4gIGNvbnN0IGRheU9mV2VlayA9IGRhdGUuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXRlRm9ybWF0XG4gICAgLnJlcGxhY2UoL1MvZywgZ2V0T3JkaW5hbChkYXkpKVxuICAgIC5yZXBsYWNlKC9ZWVlZL2csIHllYXIpXG4gICAgLnJlcGxhY2UoL1lZL2csIHllYXIuc2xpY2UoLTIpKVxuICAgIC5yZXBsYWNlKC9NTU1NL2csIGxvbmdNb250aHNbbW9udGhdKVxuICAgIC5yZXBsYWNlKC9NTU0vZywgc2hvcnRNb250aHNbbW9udGhdKVxuICAgIC5yZXBsYWNlKC9NTS9nLCAoJzAnICsgKG1vbnRoICsgMSkpLnNsaWNlKC0yKSlcbiAgICAucmVwbGFjZSgvTS9nLCBtb250aCArIDEpXG4gICAgLnJlcGxhY2UoL0REREQvZywgbG9uZ0RheXNbZGF5T2ZXZWVrXSlcbiAgICAucmVwbGFjZSgvREREL2csIHNob3J0RGF5c1tkYXlPZldlZWtdKVxuICAgIC5yZXBsYWNlKC9ERC9nLCAoJzAnICsgZGF5KS5zbGljZSgtMikpXG4gICAgLnJlcGxhY2UoL0QvZywgZGF5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9yZGluYWwoZGF5OiBudW1iZXIpOiBzdHJpbmcge1xuICBpZiAoZGF5ID4gMyAmJiBkYXkgPCAyMSkgeyByZXR1cm4gJ3RoJzsgfVxuICBzd2l0Y2ggKGRheSAlIDEwKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gJ3N0JztcbiAgICBjYXNlIDI6IHJldHVybiAnbmQnO1xuICAgIGNhc2UgMzogcmV0dXJuICdyZCc7XG4gICAgZGVmYXVsdDogcmV0dXJuICd0aCc7XG4gIH1cbn1cbiJdfQ==